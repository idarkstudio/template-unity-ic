{
  "version": 3,
  "sources": ["../../@dfinity/nns/src/constants/canister_ids.ts", "../../@dfinity/utils/src/enums/token.enums.ts", "../../@dfinity/utils/src/constants/constants.ts", "../../@dfinity/utils/src/parser/token.ts", "../../@dfinity/utils/src/services/canister.ts", "../../@dfinity/utils/src/utils/actor.utils.ts", "../../@dfinity/utils/src/utils/agent.utils.ts", "../../@dfinity/utils/src/utils/asserts.utils.ts", "../../@dfinity/utils/src/utils/arrays.utils.ts", "../../@dfinity/utils/src/utils/base32.utils.ts", "../../@dfinity/utils/src/utils/crc.utils.ts", "../../@dfinity/utils/src/utils/date.utils.ts", "../../@dfinity/utils/src/utils/debounce.utils.ts", "../../@dfinity/utils/src/utils/nullish.utils.ts", "../../@dfinity/utils/src/utils/did.utils.ts", "../../@dfinity/utils/src/utils/json.utils.ts", "../../@dfinity/utils/src/utils/principal.utils.ts", "../../@dfinity/utils/src/utils/version.utils.ts", "../../@dfinity/nns/src/genesis_token.canister.ts", "../../@dfinity/nns/candid/genesis_token.certified.idl.js", "../../@dfinity/nns/candid/genesis_token.idl.js", "../../@dfinity/nns/src/utils/proto.utils.ts", "../../@dfinity/nns/dist/esm/chunk-Q3ETFEQV.js", "../../@dfinity/nns/src/account_identifier.ts", "../../node_modules/@noble/hashes/src/_assert.ts", "../../node_modules/@noble/hashes/src/utils.ts", "../../node_modules/@noble/hashes/src/_sha2.ts", "../../node_modules/@noble/hashes/src/sha256.ts", "../../@dfinity/nns/src/constants/constants.ts", "../../node_modules/base64-js/index.js", "../../node_modules/ieee754/index.js", "../../node_modules/buffer/index.js", "../../node_modules/safe-buffer/index.js", "../../node_modules/randombytes/browser.js", "../../@dfinity/nns/src/governance.canister.ts", "../../@dfinity/nns/candid/governance.certified.idl.js", "../../@dfinity/nns/candid/governance.idl.js", "../../@dfinity/nns/src/canisters/governance/request.converters.ts", "../../@dfinity/nns/src/errors/governance.errors.ts", "../../@dfinity/nns/src/utils/account_identifier.utils.ts", "../../@dfinity/nns/src/canisters/governance/request.proto.converters.ts", "../../@dfinity/nns/src/canisters/governance/response.converters.ts", "../../@dfinity/nns/src/enums/governance.enums.ts", "../../@dfinity/nns/src/canisters/governance/response.proto.converters.ts", "../../@dfinity/nns/src/canisters/governance/services.ts", "../../@dfinity/nns/src/utils/accounts.utils.ts", "../../@dfinity/nns/src/icp.ts", "../../@dfinity/nns/src/ledger.canister.ts", "../../@dfinity/nns/candid/ledger.certified.idl.js", "../../@dfinity/nns/candid/ledger.idl.js", "../../@dfinity/nns/src/canisters/ledger/ledger.request.converts.ts", "../../@dfinity/nns/src/errors/ledger.errors.ts", "../../@dfinity/nns/src/sns_wasm.canister.ts", "../../@dfinity/nns/candid/sns_wasm.certified.idl.js", "../../@dfinity/nns/candid/sns_wasm.idl.js", "../../@dfinity/nns/src/utils/neurons.utils.ts"],
  "sourcesContent": ["import { Principal } from \"@dfinity/principal\";\n\nexport const GOVERNANCE_CANISTER_ID = Principal.fromText(\n  \"rrkah-fqaaa-aaaaa-aaaaq-cai\",\n);\n\nexport const MAINNET_GOVERNANCE_CANISTER_ID = Principal.fromText(\n  \"rrkah-fqaaa-aaaaa-aaaaq-cai\",\n);\n\nexport const MAINNET_LEDGER_CANISTER_ID = Principal.fromText(\n  \"ryjl3-tyaaa-aaaaa-aaaba-cai\",\n);\n\nexport const MAINNET_GENESIS_TOKEN_CANISTER_ID = Principal.fromText(\n  \"renrk-eyaaa-aaaaa-aaada-cai\",\n);\n\n// TODO(L2-828): Sns-wasm canister is not yet deployed on mainnet\nexport const MAINNET_SNS_WASM_CANISTER_ID = Principal.fromText(\n  \"r7inp-6aaaa-aaaaa-aaabq-cai\",\n);\n", "export enum FromStringToTokenError {\n  FractionalMoreThan8Decimals,\n  InvalidFormat,\n}\n", "export const E8S_PER_TOKEN = BigInt(100000000);\n", "import { E8S_PER_TOKEN } from \"../constants/constants\";\nimport { FromStringToTokenError } from \"../enums/token.enums\";\n\n/**\n * Receives a string representing a number and returns the big int or error.\n *\n * @param amount - in string format\n * @returns bigint | FromStringToTokenError\n */\nexport const convertStringToE8s = (\n  value: string,\n): bigint | FromStringToTokenError => {\n  // replace exponential format (1e-4) with plain (0.0001)\n  // doesn't support decimals for values >= ~1e16\n  let amount = value.includes(\"e\")\n    ? Number(value).toLocaleString(\"en\", {\n        useGrouping: false,\n        maximumFractionDigits: 20,\n      })\n    : value;\n\n  // Remove all instances of \",\" and \"'\".\n  amount = amount.trim().replace(/[,']/g, \"\");\n\n  // Verify that the string is of the format 1234.5678\n  const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n  if (!regexMatch || regexMatch[0] !== amount) {\n    return FromStringToTokenError.InvalidFormat;\n  }\n\n  const [integral, fractional] = amount.split(\".\");\n\n  let e8s = BigInt(0);\n\n  if (integral) {\n    try {\n      e8s += BigInt(integral) * E8S_PER_TOKEN;\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  if (fractional) {\n    if (fractional.length > 8) {\n      return FromStringToTokenError.FractionalMoreThan8Decimals;\n    }\n    try {\n      e8s += BigInt(fractional.padEnd(8, \"0\"));\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  return e8s;\n};\n\nexport interface Token {\n  symbol: string;\n  name: string;\n}\n\nexport const ICPToken: Token = {\n  symbol: \"ICP\",\n  name: \"Internet Computer\",\n};\n\n/**\n * Represents an amount of tokens.\n *\n * @param e8s - The amount of tokens in bigint.\n * @param token - The token type.\n */\nexport class TokenAmount {\n  private constructor(\n    protected e8s: bigint,\n    public token: Token,\n  ) {}\n\n  /**\n   * Initialize from a bigint. Bigint are considered e8s.\n   *\n   * @param {amount: bigint; token?: Token;} params\n   * @param {bigint} params.amount The amount in bigint format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromE8s({\n    amount,\n    token,\n  }: {\n    amount: bigint;\n    token: Token;\n  }): TokenAmount {\n    return new TokenAmount(amount, token);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   *\n   * @param {amount: string; token?: Token;} params\n   * @param {string} params.amount The amount in string format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromString({\n    amount,\n    token,\n  }: {\n    amount: string;\n    token: Token;\n  }): TokenAmount | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n\n    if (typeof e8s === \"bigint\") {\n      return new TokenAmount(e8s, token);\n    }\n    return e8s;\n  }\n\n  /**\n   * Initialize from a number.\n   *\n   * 1 integer is considered E8S_PER_TOKEN\n   *\n   * @param {amount: number; token?: Token;} params\n   * @param {string} params.amount The amount in number format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromNumber({\n    amount,\n    token,\n  }: {\n    amount: number;\n    token: Token;\n  }): TokenAmount {\n    const tokenAmount = TokenAmount.fromString({\n      amount: amount.toString(),\n      token,\n    });\n    if (tokenAmount instanceof TokenAmount) {\n      return tokenAmount;\n    }\n    if (tokenAmount === FromStringToTokenError.FractionalMoreThan8Decimals) {\n      throw new Error(`Number ${amount} has more than 8 decimals`);\n    }\n\n    // This should never happen\n    throw new Error(`Invalid number ${amount}`);\n  }\n\n  /**\n   *\n   * @returns The amount of e8s.\n   */\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n}\n", "import type { Principal } from \"@dfinity/principal\";\nimport type { QueryParams } from \"../types/query.params\";\n\nexport abstract class Canister<T> {\n  protected constructor(\n    private readonly id: Principal,\n    protected readonly service: T,\n    protected readonly certifiedService: T,\n  ) {}\n\n  get canisterId(): Principal {\n    return this.id;\n  }\n\n  protected caller = ({ certified = true }: QueryParams): T =>\n    certified ? this.certifiedService : this.service;\n}\n", "import type { ActorConfig, ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { IDL } from \"@dfinity/candid\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type { CanisterOptions } from \"../types/canister.options\";\nimport { defaultAgent } from \"./agent.utils\";\n\ntype RequiredCanisterOptions<T> = Required<\n  Pick<CanisterOptions<T>, \"canisterId\">\n> &\n  Omit<CanisterOptions<T>, \"canisterId\">;\n\nexport const createServices = <T>({\n  options: {\n    canisterId,\n    serviceOverride,\n    certifiedServiceOverride,\n    agent: agentOption,\n    callTransform,\n    queryTransform,\n  },\n  idlFactory,\n  certifiedIdlFactory,\n}: {\n  options: RequiredCanisterOptions<T> &\n    Pick<ActorConfig, \"queryTransform\" | \"callTransform\">;\n  idlFactory: IDL.InterfaceFactory;\n  certifiedIdlFactory: IDL.InterfaceFactory;\n}): {\n  service: ActorSubclass<T>;\n  certifiedService: ActorSubclass<T>;\n  agent: Agent;\n  canisterId: Principal;\n} => {\n  const agent: Agent = agentOption ?? defaultAgent();\n\n  const service: ActorSubclass<T> =\n    serviceOverride ??\n    Actor.createActor<T>(idlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  const certifiedService: ActorSubclass<T> =\n    certifiedServiceOverride ??\n    Actor.createActor<T>(certifiedIdlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  return { service, certifiedService, agent, canisterId };\n};\n", "import type { Agent, Identity } from \"@dfinity/agent\";\nimport { AnonymousIdentity, HttpAgent } from \"@dfinity/agent\";\n\n/**\n * Get a default agent that connects to mainnet with the anonymous identity.\n * @returns The default agent to use\n */\nexport const defaultAgent = (): Agent =>\n  new HttpAgent({\n    host: \"https://ic0.app\",\n    identity: new AnonymousIdentity(),\n  });\n\n/**\n * Create an agent for a given identity\n * @param identity A mandatory identity to use for the agent\n * @param host An optional host to connect to\n * @param fetchRootKey Fetch root key for certificate validation during local development or on testnet\n */\nexport const createAgent = async ({\n  identity,\n  host,\n  fetchRootKey = false,\n}: {\n  identity: Identity;\n  host?: string;\n  fetchRootKey?: boolean;\n}): Promise<HttpAgent> => {\n  const agent: HttpAgent = new HttpAgent({\n    identity,\n    ...(host !== undefined && { host }),\n  });\n\n  if (fetchRootKey) {\n    await agent.fetchRootKey();\n  }\n\n  return agent;\n};\n", "export class InvalidPercentageError extends Error {}\nexport class NullishError extends Error {}\n\nexport const assertNonNullish: <T>(\n  value: T,\n  message?: string,\n) => asserts value is NonNullable<T> = <T>(\n  value: T,\n  message?: string,\n): void => {\n  if (value === null || value === undefined) {\n    throw new NullishError(message);\n  }\n};\nexport const assertPercentageNumber = (percentage: number) => {\n  if (percentage < 0 || percentage > 100) {\n    throw new InvalidPercentageError(\n      `${percentage} is not a valid percentage number.`,\n    );\n  }\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nexport const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.getBigUint64 === \"function\") {\n    return view.getBigUint64(0);\n  } else {\n    const high = BigInt(view.getUint32(0));\n    const low = BigInt(view.getUint32(4));\n\n    return (high << BigInt(32)) + low;\n  }\n};\n\nexport const bigIntToUint8Array = (value: bigint): Uint8Array => {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  if (typeof view.setBigUint64 === \"function\") {\n    view.setBigUint64(0, value);\n  } else {\n    const high = Number(value >> BigInt(32));\n    const low = Number(value & BigInt(0xffffffff));\n\n    view.setUint32(0, high);\n    view.setUint32(4, low);\n  }\n\n  return new Uint8Array(buffer);\n};\n\nexport const numberToUint8Array = (value: number): Uint8Array => {\n  const view = new DataView(new ArrayBuffer(8));\n  for (let index = 7; index >= 0; --index) {\n    view.setUint8(index, value % 256);\n    value = value >> 8;\n  }\n  return new Uint8Array(view.buffer);\n};\n\nexport const arrayBufferToUint8Array = (buffer: ArrayBuffer): Uint8Array =>\n  new Uint8Array(buffer);\n\nexport const uint8ArrayToArrayOfNumber = (array: Uint8Array): Array<number> =>\n  Array.from(array);\n\nexport const arrayOfNumberToUint8Array = (numbers: Array<number>): Uint8Array =>\n  new Uint8Array(numbers);\n\nexport const asciiStringToByteArray = (text: string): Array<number> =>\n  Array.from(text).map((c) => c.charCodeAt(0));\n\nexport const hexStringToUint8Array = (hexString: string): Uint8Array => {\n  const matches = hexString.match(/.{1,2}/g);\n\n  assertNonNullish(matches, \"Invalid hex string.\");\n\n  return Uint8Array.from(matches.map((byte) => parseInt(byte, 16)));\n};\n\nexport const uint8ArrayToHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz234567\";\n\n// Build a lookup table for decoding.\nconst LOOKUP_TABLE: Record<string, number> = Object.create(null);\nfor (let i = 0; i < ALPHABET.length; i++) {\n  LOOKUP_TABLE[ALPHABET[i]] = i;\n}\n\n// Add aliases for rfc4648.\nLOOKUP_TABLE[\"0\"] = LOOKUP_TABLE.o;\nLOOKUP_TABLE[\"1\"] = LOOKUP_TABLE.i;\n\n/**\n * Encode an Uint8Array to a base32 string.\n *\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport const encodeBase32 = (input: Uint8Array): string => {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n\n  // The output string in base32.\n  let output = \"\";\n\n  function encodeByte(byte: number): number {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = (byte << skip) & 248;\n    }\n\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n\n    if (skip < 4) {\n      // produce a character\n      output += ALPHABET[bits >> 3];\n      skip += 5;\n    }\n\n    return 0;\n  }\n\n  for (let i = 0; i < input.length; ) {\n    i += encodeByte(input[i]);\n  }\n\n  return output + (skip < 0 ? ALPHABET[bits >> 3] : \"\");\n};\n\n/**\n * Decode a base32 string to Uint8Array.\n *\n * @param input The input string to decode.\n * @param input The base32 encoded string to decode.\n */\nexport function decodeBase32(input: string): Uint8Array {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n\n  const output = new Uint8Array(((input.length * 4) / 3) | 0);\n  let o = 0;\n\n  function decodeChar(char: string) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = LOOKUP_TABLE[char.toLowerCase()];\n    assertNonNullish(val, `Invalid character: ${JSON.stringify(char)}`);\n\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n\n      if (skip > 0) {\n        byte = (val << (5 - skip)) & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n\n  for (const c of input) {\n    decodeChar(c);\n  }\n\n  return output.slice(0, o);\n}\n", "// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable: Uint32Array = new Uint32Array([\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n  0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n  0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n  0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n  0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n  0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n  0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n  0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n  0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n  0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n  0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n  0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n  0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n  0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n  0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n  0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n  0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n  0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n  0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n  0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n  0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n  0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n  0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n  0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n  0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n  0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n  0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n\nconst crc32 = (bytes: Uint8Array): number => {\n  let crc = -1;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ (crc >>> 8);\n  }\n\n  return (crc ^ -1) >>> 0;\n};\n\nexport const bigEndianCrc32 = (bytes: Uint8Array): Uint8Array => {\n  const checksumArrayBuf = new ArrayBuffer(4);\n  const view = new DataView(checksumArrayBuf);\n  view.setUint32(0, crc32(bytes), false);\n  return new Uint8Array(checksumArrayBuf);\n};\n", "const SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst DAYS_IN_NON_LEAP_YEAR = 365;\n\nexport interface I18nSecondsToDuration {\n  year: string;\n  year_plural: string;\n  month: string;\n  month_plural: string;\n  day: string;\n  day_plural: string;\n  hour: string;\n  hour_plural: string;\n  minute: string;\n  minute_plural: string;\n  second: string;\n  second_plural: string;\n}\n\nconst EN_TIME: I18nSecondsToDuration = {\n  year: \"year\",\n  year_plural: \"years\",\n  month: \"month\",\n  month_plural: \"months\",\n  day: \"day\",\n  day_plural: \"days\",\n  hour: \"hour\",\n  hour_plural: \"hours\",\n  minute: \"minute\",\n  minute_plural: \"minutes\",\n  second: \"second\",\n  second_plural: \"seconds\",\n};\n\n/**\n * Convert seconds to a human-readable duration, such as \"6 days, 10 hours.\"\n * @param {Object} options - The options object.\n * @param {bigint} options.seconds - The number of seconds to convert.\n * @param {I18nSecondsToDuration} [options.i18n] - The i18n object for customizing language and units. Defaults to English.\n * @returns {string} The human-readable duration string.\n */\nexport const secondsToDuration = ({\n  seconds,\n  i18n = EN_TIME,\n}: {\n  seconds: bigint;\n  i18n?: I18nSecondsToDuration;\n}): string => {\n  let minutes = seconds / BigInt(SECONDS_IN_MINUTE);\n\n  let hours = minutes / BigInt(MINUTES_IN_HOUR);\n  minutes -= hours * BigInt(MINUTES_IN_HOUR);\n\n  let days = hours / BigInt(HOURS_IN_DAY);\n  hours -= days * BigInt(HOURS_IN_DAY);\n\n  const years = fullYearsInDays(days);\n  days -= daysInYears(years);\n\n  const periods = [\n    createLabel(\"year\", years),\n    createLabel(\"day\", days),\n    createLabel(\"hour\", hours),\n    createLabel(\"minute\", minutes),\n    ...(seconds > BigInt(0) && seconds < BigInt(60)\n      ? [createLabel(\"second\", seconds)]\n      : []),\n  ];\n\n  return periods\n    .filter(({ amount }) => amount > 0)\n    .slice(0, 2)\n    .map(\n      (labelInfo) =>\n        `${labelInfo.amount} ${\n          labelInfo.amount === 1\n            ? i18n[labelInfo.labelKey]\n            : i18n[`${labelInfo.labelKey}_plural`]\n        }`,\n    )\n    .join(\", \");\n};\n\nconst fullYearsInDays = (days: bigint): bigint => {\n  // Use integer division.\n  let years = days / BigInt(DAYS_IN_NON_LEAP_YEAR);\n  while (daysInYears(years) > days) {\n    years--;\n  }\n  return years;\n};\n\nconst daysInYears = (years: bigint): bigint => {\n  // Use integer division.\n  const leapDays = years / BigInt(4);\n  return years * BigInt(DAYS_IN_NON_LEAP_YEAR) + leapDays;\n};\n\ntype LabelKey = \"year\" | \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\";\ntype LabelInfo = {\n  labelKey: LabelKey;\n  amount: number;\n};\nconst createLabel = (labelKey: LabelKey, amount: bigint): LabelInfo => ({\n  labelKey,\n  amount: Number(amount),\n});\n", "/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport const debounce = (func: Function, timeout?: number) => {\n  let timer: NodeJS.Timer | undefined;\n\n  return (...args: unknown[]) => {\n    const next = () => func(...args);\n\n    if (timer) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore TypeScript global and window confusion even if we are using @types/node\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(\n      next,\n      timeout !== undefined && timeout > 0 ? timeout : 300,\n    );\n  };\n};\n", "/** Is null or undefined */\nexport const isNullish = <T>(\n  argument: T | undefined | null,\n): argument is undefined | null => argument === null || argument === undefined;\n\n/** Not null and not undefined */\nexport const nonNullish = <T>(\n  argument: T | undefined | null,\n): argument is NonNullable<T> => !isNullish(argument);\n\n/** Not null and not undefined and not empty */\nexport const notEmptyString = (value: string | undefined | null): boolean =>\n  nonNullish(value) && value !== \"\";\n", "import { assertNonNullish } from \"./asserts.utils\";\nimport { nonNullish } from \"./nullish.utils\";\n\nexport const toNullable = <T>(value?: T | null): [] | [T] => {\n  return nonNullish(value) ? [value] : [];\n};\n\nexport const fromNullable = <T>(value: [] | [T]): T | undefined => {\n  return value?.[0];\n};\n\nexport const fromDefinedNullable = <T>(value: [] | [T]): T => {\n  const result = fromNullable(value);\n\n  assertNonNullish(result);\n\n  return result;\n};\n", "import { Principal } from \"@dfinity/principal\";\nimport { nonNullish } from \"./nullish.utils\";\n\nconst JSON_KEY_BIGINT = \"__bigint__\";\nconst JSON_KEY_PRINCIPAL = \"__principal__\";\nconst JSON_KEY_UINT8ARRAY = \"__uint8array__\";\n\n/**\n * A parser that interprets revived BigInt, Principal, and Uint8Array when constructing JavaScript values or objects.\n */\nexport const jsonReplacer = (_key: string, value: unknown): unknown => {\n  if (typeof value === \"bigint\") {\n    return { [JSON_KEY_BIGINT]: `${value}` };\n  }\n\n  if (nonNullish(value) && value instanceof Principal) {\n    return { [JSON_KEY_PRINCIPAL]: value.toText() };\n  }\n\n  if (nonNullish(value) && value instanceof Uint8Array) {\n    return { [JSON_KEY_UINT8ARRAY]: Array.from(value) };\n  }\n\n  return value;\n};\n\n/**\n * A function that alters the behavior of the stringification process for BigInt, Principal and Uint8Array.\n */\nexport const jsonReviver = (_key: string, value: unknown): unknown => {\n  const mapValue = <T>(key: string): T => (value as Record<string, T>)[key];\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_BIGINT in value\n  ) {\n    return BigInt(mapValue(JSON_KEY_BIGINT));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_PRINCIPAL in value\n  ) {\n    return Principal.fromText(mapValue(JSON_KEY_PRINCIPAL));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_UINT8ARRAY in value\n  ) {\n    return Uint8Array.from(mapValue(JSON_KEY_UINT8ARRAY));\n  }\n\n  return value;\n};\n", "import type { Principal } from \"@dfinity/principal\";\n\n/**\n * Convert a principal to a Uint8Array 32 length.\n * e.g. Useful to convert a canister ID when topping up cycles with the Cmc canister\n * @param principal The principal that needs to be converted to Subaccount\n */\nexport const principalToSubAccount = (principal: Principal): Uint8Array => {\n  const bytes: Uint8Array = principal.toUint8Array();\n  const subAccount: Uint8Array = new Uint8Array(32);\n  subAccount[0] = bytes.length;\n  subAccount.set(bytes, 1);\n  return subAccount;\n};\n", "const AMOUNT_VERSION_PARTS = 3;\nconst addZeros = (nums: number[], amountZeros: number): number[] =>\n  amountZeros > nums.length\n    ? [...nums, ...[...Array(amountZeros - nums.length).keys()].map(() => 0)]\n    : nums;\n\nconst convertToNumber = (versionStringPart: string): number => {\n  if (!Number.isNaN(Number(versionStringPart))) {\n    return Number(versionStringPart);\n  }\n  const strippedVersion = versionStringPart.split(\"\").reduce((acc, char) => {\n    if (Number.isNaN(Number(char))) {\n      return acc;\n    }\n    return acc + char;\n  }, \"\");\n  return Number(strippedVersion);\n};\n/**\n * Returns true if the current version is smaller than the minVersion, false if equal or bigger.\n * Tags after patch version are ignored, e.g. 1.0.0-beta.1 is considered equal to 1.0.0.\n *\n * @param {Object} params\n * @param {string} params.minVersion Ex: \"1.0.0\"\n * @param {string} params.currentVersion Ex: \"2.0.0\"\n * @returns boolean\n */\nexport const smallerVersion = ({\n  minVersion,\n  currentVersion,\n}: {\n  minVersion: string;\n  currentVersion: string;\n}): boolean => {\n  const minVersionStandarized = addZeros(\n    minVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  const currentVersionStandarized = addZeros(\n    currentVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  // Versions need to have the same number of parts to be comparable\n  // Source: https://stackoverflow.com/a/65687141\n  return (\n    currentVersionStandarized.localeCompare(minVersionStandarized, undefined, {\n      numeric: true,\n      sensitivity: \"base\",\n    }) < 0\n  );\n};\n", "import type { ActorSubclass } from \"@dfinity/agent\";\nimport { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type { _SERVICE as GenesisTokenService } from \"../candid/genesis_token\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/genesis_token.certified.idl\";\nimport { idlFactory } from \"../candid/genesis_token.idl\";\nimport { MAINNET_GENESIS_TOKEN_CANISTER_ID } from \"./constants/canister_ids\";\nimport type { NeuronId } from \"./types/common\";\n\nexport class GenesisTokenCanister {\n  private constructor(\n    private readonly service: ActorSubclass<GenesisTokenService>,\n  ) {}\n\n  public static create(options: CanisterOptions<GenesisTokenService> = {}) {\n    const { service } = createServices<GenesisTokenService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_GENESIS_TOKEN_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new GenesisTokenCanister(service);\n  }\n\n  public claimNeurons = async ({\n    hexPubKey,\n  }: {\n    hexPubKey: string;\n  }): Promise<NeuronId[]> => {\n    const response = await this.service.claim_neurons(hexPubKey);\n    if (\"Ok\" in response) {\n      return response.Ok.map((neuronId) => neuronId.id);\n    }\n\n    throw new Error(response.Err);\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], []),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], []),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'len' : IDL.Func([], [IDL.Nat16], []),\n    'total' : IDL.Func([], [IDL.Nat32], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], ['query']),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], ['query']),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'len' : IDL.Func([], [IDL.Nat16], ['query']),\n    'total' : IDL.Func([], [IDL.Nat32], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "import type { Agent } from \"@dfinity/agent\";\nimport { polling } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype ModuleType = typeof import(\"@dfinity/nns-proto\");\nexport const importNnsProto = (): Promise<ModuleType> =>\n  import(\"@dfinity/nns-proto\");\n\n/**\n * Submits an update call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const updateCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const submitResponse = await agent.call(canisterId, {\n    methodName,\n    arg,\n    effectiveCanisterId: canisterId,\n  });\n\n  if (!submitResponse.response.ok) {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  Request ID: ${submitResponse.requestId}`,\n        `  HTTP status code: ${submitResponse.response.status}`,\n        `  HTTP status text: ${submitResponse.response.statusText}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  const blob = await polling.pollForResponse(\n    agent,\n    canisterId,\n    submitResponse.requestId,\n    polling.defaultStrategy(),\n  );\n\n  return new Uint8Array(blob);\n};\n\n/**\n * Submits a query call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const queryCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const queryResponse = await agent.query(canisterId, {\n    methodName,\n    arg,\n  });\n\n  if (queryResponse.status == \"rejected\") {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  HTTP status code: ${queryResponse.reject_code}`,\n        `  HTTP status text: ${queryResponse.reject_message}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  return new Uint8Array(queryResponse.reply.arg);\n};\n", "var g=Object.create;var e=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var i=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var l=(b,a,c)=>a in b?e(b,a,{enumerable:!0,configurable:!0,writable:!0,value:c}):b[a]=c;var n=(b,a)=>()=>(a||b((a={exports:{}}).exports,a),a.exports);var m=(b,a,c,f)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let d of i(a))!k.call(b,d)&&d!==c&&e(b,d,{get:()=>a[d],enumerable:!(f=h(a,d))||f.enumerable});return b};var o=(b,a,c)=>(c=b!=null?g(j(b)):{},m(a||!b||!b.__esModule?e(c,\"default\",{value:b,enumerable:!0}):c,b));var p=(b,a,c)=>(l(b,typeof a!=\"symbol\"?a+\"\":a,c),c);export{n as a,o as b,p as c};\n//# sourceMappingURL=chunk-Q3ETFEQV.js.map\n", "import type { AccountIdentifier as AccountIdentifierPb } from \"@dfinity/nns-proto\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\nimport type { AccountIdentifier as AccountIdentifierCandid } from \"../candid/governance\";\nimport { importNnsProto } from \"./utils/proto.utils\";\n\nexport class AccountIdentifier {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromHex(hex: string): AccountIdentifier {\n    return new AccountIdentifier(Uint8Array.from(Buffer.from(hex, \"hex\")));\n  }\n\n  public static fromPrincipal({\n    principal,\n    subAccount = SubAccount.ZERO,\n  }: {\n    principal: Principal;\n    subAccount?: SubAccount;\n  }): AccountIdentifier {\n    // Hash (sha224) the principal, the subAccount and some padding\n    const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n    const shaObj = sha224.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        ...padding,\n        ...principal.toUint8Array(),\n        ...subAccount.toUint8Array(),\n      ]),\n    );\n    const hash = shaObj.digest();\n\n    // Prepend the checksum of the hash and convert to a hex string\n    const checksum = bigEndianCrc32(hash);\n    const bytes = new Uint8Array([...checksum, ...hash]);\n    return new AccountIdentifier(bytes);\n  }\n\n  /**\n   * @returns An AccountIdentifier protobuf object.\n   */\n  public async toProto(): Promise<AccountIdentifierPb> {\n    const { AccountIdentifier: AccountIdentifierConstructor } =\n      await importNnsProto();\n    const accountIdentifier = new AccountIdentifierConstructor();\n    accountIdentifier.setHash(this.bytes);\n    return accountIdentifier;\n  }\n\n  public toHex(): string {\n    return uint8ArrayToHexString(this.bytes);\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n\n  public toNumbers(): number[] {\n    return Array.from(this.bytes);\n  }\n\n  public toAccountIdentifierHash(): AccountIdentifierCandid {\n    return {\n      hash: this.toUint8Array(),\n    };\n  }\n}\n\nexport class SubAccount {\n  private constructor(private readonly bytes: Uint8Array) {}\n\n  public static fromBytes(bytes: Uint8Array): SubAccount | Error {\n    if (bytes.length != 32) {\n      return Error(\"Subaccount length must be 32-bytes\");\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromPrincipal(principal: Principal): SubAccount {\n    const bytes = new Uint8Array(32).fill(0);\n\n    const principalBytes = principal.toUint8Array();\n    bytes[0] = principalBytes.length;\n\n    for (let i = 0; i < principalBytes.length; i++) {\n      bytes[1 + i] = principalBytes[i];\n    }\n\n    return new SubAccount(bytes);\n  }\n\n  public static fromID(id: number): SubAccount {\n    if (id < 0 || id > 255) {\n      throw \"Subaccount ID must be >= 0 and <= 255\";\n    }\n\n    const bytes: Uint8Array = new Uint8Array(32).fill(0);\n    bytes[31] = id;\n    return new SubAccount(bytes);\n  }\n\n  public static ZERO: SubAccount = this.fromID(0);\n\n  public toUint8Array(): Uint8Array {\n    return this.bytes;\n  }\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n", "/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n", "import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport type { ManageNeuron as PbManageNeuron } from \"@dfinity/nns-proto\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  assertPercentageNumber,\n  createServices,\n  fromNullable,\n  isNullish,\n  nonNullish,\n  uint8ArrayToBigInt,\n} from \"@dfinity/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport randomBytes from \"randombytes\";\nimport type {\n  Command_1,\n  ListProposalInfo,\n  MergeResponse,\n  Neuron as RawNeuron,\n  NeuronInfo as RawNeuronInfo,\n  ProposalInfo as RawProposalInfo,\n  RewardEvent,\n  _SERVICE as GovernanceService,\n} from \"../candid/governance\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/governance.certified.idl\";\nimport { idlFactory } from \"../candid/governance.idl\";\nimport { AccountIdentifier, SubAccount } from \"./account_identifier\";\nimport {\n  fromClaimOrRefreshNeuronRequest,\n  fromListNeurons,\n  fromListProposalsRequest,\n  toAddHotkeyRequest,\n  toAutoStakeMaturityRequest,\n  toClaimOrRefreshRequest,\n  toDisburseNeuronRequest,\n  toIncreaseDissolveDelayRequest,\n  toJoinCommunityFundRequest,\n  toLeaveCommunityFundRequest,\n  toMakeProposalRawRequest,\n  toManageNeuronsFollowRequest,\n  toMergeMaturityRequest,\n  toMergeRequest,\n  toRegisterVoteRequest,\n  toRemoveHotkeyRequest,\n  toSetDissolveDelayRequest,\n  toSpawnNeuronRequest,\n  toSplitRawRequest,\n  toStakeMaturityRequest,\n  toStartDissolvingRequest,\n  toStopDissolvingRequest,\n} from \"./canisters/governance/request.converters\";\nimport {\n  fromAddHotKeyRequest,\n  fromCommunityFundRequest,\n  fromDisburseRequest,\n  fromIncreaseDissolveDelayRequest,\n  fromMergeMaturityRequest,\n  fromRemoveHotKeyRequest,\n  fromSpawnRequest,\n  fromStartDissolvingRequest,\n  fromStopDissolvingRequest,\n} from \"./canisters/governance/request.proto.converters\";\nimport {\n  convertPbNeuronToNeuronInfo,\n  toArrayOfNeuronInfo,\n  toListProposalsResponse,\n  toNeuronInfo,\n  toProposalInfo,\n} from \"./canisters/governance/response.converters\";\nimport { checkPbManageNeuronResponse } from \"./canisters/governance/response.proto.converters\";\nimport {\n  getSuccessfulCommandFromResponse,\n  manageNeuron,\n  simulateManageNeuron,\n} from \"./canisters/governance/services\";\nimport { MAINNET_GOVERNANCE_CANISTER_ID } from \"./constants/canister_ids\";\nimport { E8S_PER_TOKEN } from \"./constants/constants\";\nimport type { Vote } from \"./enums/governance.enums\";\nimport {\n  CouldNotClaimNeuronError,\n  FeatureNotSupportedError,\n  GovernanceError,\n  InsufficientAmountError,\n  UnrecognizedTypeError,\n} from \"./errors/governance.errors\";\nimport type { LedgerCanister } from \"./ledger.canister\";\nimport type { E8s, NeuronId } from \"./types/common\";\nimport type { GovernanceCanisterOptions } from \"./types/governance.options\";\nimport type {\n  ClaimOrRefreshNeuronRequest,\n  DisburseRequest,\n  FollowRequest,\n  KnownNeuron,\n  ListProposalsRequest,\n  ListProposalsResponse,\n  MakeProposalRequest,\n  MergeMaturityRequest,\n  NeuronInfo,\n  ProposalId,\n  ProposalInfo,\n  SpawnRequest,\n} from \"./types/governance_converters\";\nimport { checkAccountId } from \"./utils/accounts.utils\";\nimport { importNnsProto, updateCall } from \"./utils/proto.utils\";\n\nexport class GovernanceCanister {\n  private constructor(\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<GovernanceService>,\n    private readonly certifiedService: ActorSubclass<GovernanceService>,\n    private readonly agent: Agent,\n    private readonly hardwareWallet: boolean = false,\n  ) {\n    this.canisterId = canisterId;\n    this.service = service;\n    this.certifiedService = certifiedService;\n    this.agent = agent;\n    this.hardwareWallet = hardwareWallet;\n  }\n\n  public static create(options: GovernanceCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_GOVERNANCE_CANISTER_ID;\n\n    const { service, certifiedService, agent } =\n      createServices<GovernanceService>({\n        options: {\n          ...options,\n          canisterId,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new GovernanceCanister(\n      canisterId,\n      service,\n      certifiedService,\n      agent,\n      options.hardwareWallet,\n    );\n  }\n\n  /**\n   * Returns the list of neurons controlled by the caller.\n   *\n   * If an array of neuron IDs is provided, precisely those neurons will be fetched.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   */\n  public listNeurons = async ({\n    certified = true,\n    neuronIds,\n  }: {\n    certified: boolean;\n    neuronIds?: NeuronId[];\n  }): Promise<NeuronInfo[]> => {\n    if (this.hardwareWallet && !certified) {\n      throw new FeatureNotSupportedError();\n    }\n\n    if (this.hardwareWallet) {\n      // Hardware Wallet does not support specifying neuronIds.\n      return this.listNeuronsHardwareWallet();\n    }\n    const rawRequest = fromListNeurons(neuronIds);\n    const raw_response = await this.getGovernanceService(\n      certified,\n    ).list_neurons(rawRequest);\n    return toArrayOfNeuronInfo({\n      response: raw_response,\n      canisterId: this.canisterId,\n    });\n  };\n\n  /**\n   * Returns the list of neurons who have been approved by the community to\n   * appear as the default followee options.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public listKnownNeurons = async (\n    certified = true,\n  ): Promise<KnownNeuron[]> => {\n    const response = await this.getGovernanceService(\n      certified,\n    ).list_known_neurons();\n\n    return response.known_neurons.map((n) => ({\n      id: fromNullable(n.id)?.id ?? BigInt(0),\n      name: fromNullable(n.known_neuron_data)?.name ?? \"\",\n      description: fromNullable(\n        fromNullable(n.known_neuron_data)?.description ?? [],\n      ),\n    }));\n  };\n\n  /**\n   * Returns the latest reward event.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it's fetched using a query call.\n   *\n   */\n  public getLastestRewardEvent = async (\n    certified = true,\n  ): Promise<RewardEvent> => {\n    return this.getGovernanceService(certified).get_latest_reward_event();\n  };\n\n  /**\n   * Returns the list of proposals made for the community to vote on,\n   * paginated and filtered by the request.\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param request the options to list the proposals (limit number of results, topics to search for, etc.)\n   * @param certified query or update calls\n   */\n  public listProposals = async ({\n    request,\n    certified = true,\n  }: {\n    request: ListProposalsRequest;\n    certified?: boolean;\n  }): Promise<ListProposalsResponse> => {\n    const rawRequest: ListProposalInfo = fromListProposalsRequest(request);\n    const rawResponse = await this.getGovernanceService(\n      certified,\n    ).list_proposals(rawRequest);\n    return toListProposalsResponse(rawResponse);\n  };\n\n  /**\n   * @throws {@link InsufficientAmountError}\n   * @throws {@link StakeNeuronTransferError}\n   * @throws {@link CouldNotClaimNeuronError}\n   * @throws {@link TransferError}\n   */\n  public stakeNeuron = async ({\n    stake,\n    principal,\n    fromSubAccount,\n    ledgerCanister,\n    createdAt,\n    fee,\n  }: {\n    stake: bigint;\n    principal: Principal;\n    fromSubAccount?: number[];\n    ledgerCanister: LedgerCanister;\n    // Used for the TransferRequest parameters.\n    // Check the TransferRequest type for more information.\n    createdAt?: bigint;\n    fee?: E8s;\n  }): Promise<NeuronId> => {\n    if (stake < E8S_PER_TOKEN) {\n      throw new InsufficientAmountError(stake);\n    }\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const nonce = uint8ArrayToBigInt(nonceBytes);\n    const toSubAccount = this.buildNeuronStakeSubAccount(nonceBytes, principal);\n    const accountIdentifier = AccountIdentifier.fromPrincipal({\n      principal: this.canisterId,\n      subAccount: toSubAccount,\n    });\n\n    // Send amount to the ledger.\n    await ledgerCanister.transfer({\n      memo: nonce,\n      amount: stake,\n      fromSubAccount,\n      to: accountIdentifier,\n      createdAt,\n      fee,\n    });\n\n    // Notify the governance of the transaction so that the neuron is created.\n    const neuronId: NeuronId | undefined =\n      await this.claimOrRefreshNeuronFromAccount({\n        controller: principal,\n        memo: nonce,\n      });\n\n    // Typescript was complaining with `neuronId || new NeuronNotFound()`:\n    // \"Type 'undefined' is not assignable to type 'bigint | StakeNeuronError | TransferError'\"\n    // hence the explicit check.\n    if (isNullish(neuronId)) {\n      throw new CouldNotClaimNeuronError();\n    }\n\n    return neuronId;\n  };\n\n  /**\n   * Increases dissolve delay of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public increaseDissolveDelay = async ({\n    neuronId,\n    additionalDissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    additionalDissolveDelaySeconds: number;\n  }): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.increaseDissolveDelayHardwareWallet({\n        neuronId,\n        additionalDissolveDelaySeconds,\n      });\n    }\n    const request = toIncreaseDissolveDelayRequest({\n      neuronId,\n      additionalDissolveDelaySeconds,\n    });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets dissolve delay of a neuron.\n   * The new date is now + dissolveDelaySeconds.\n   *\n   * @param {NeuronId} neuronId\n   * @param {number} dissolveDelaySeconds\n   * @throws {@link GovernanceError}\n   */\n  public setDissolveDelay = async ({\n    neuronId,\n    dissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    dissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const request = toSetDissolveDelayRequest({\n      neuronId,\n      dissolveDelaySeconds,\n    });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Start dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public startDissolving = async (neuronId: NeuronId): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.startDissolvingHardwareWallet(neuronId);\n    }\n    const request = toStartDissolvingRequest(neuronId);\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stop dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public stopDissolving = async (neuronId: NeuronId): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.stopDissolvingHardwareWallet(neuronId);\n    }\n    const request = toStopDissolvingRequest(neuronId);\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Neuron joins the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public joinCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.joinCommunityFundHardwareWallet(neuronId);\n    }\n\n    const request = toJoinCommunityFundRequest(neuronId);\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Changes auto-stake maturity for this Neuron. While on, auto-stake maturity will cause all the maturity generated by voting rewards to this neuron to be automatically staked and contribute to the voting power of the neuron.\n   *\n   * @param {neuronId: NeuronId; autoStake: boolean;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to request a change of the auto stake feature\n   * @param {number} autoStake `true` to enable the auto-stake maturity for this neuron, `false` to turn it off\n   *\n   * @throws {@link GovernanceError}\n   */\n  public autoStakeMaturity = (params: {\n    neuronId: NeuronId;\n    autoStake: boolean;\n  }): Promise<void> =>\n    manageNeuron({\n      request: toAutoStakeMaturityRequest(params),\n      service: this.certifiedService,\n    });\n\n  /**\n   * Neuron leaves the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public leaveCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    const request = toLeaveCommunityFundRequest(neuronId);\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets node provider reward account.\n   * Where the reward is paid to.\n   *\n   * @param {string} accountIdentifier\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public setNodeProviderAccount = async (\n    accountIdentifier: string,\n  ): Promise<void> => {\n    // Might throw InvalidAccountIDError\n    checkAccountId(accountIdentifier);\n    const account = AccountIdentifier.fromHex(accountIdentifier);\n    const response = await this.certifiedService.update_node_provider({\n      reward_account: [account.toAccountIdentifierHash()],\n    });\n\n    if (\"Err\" in response) {\n      throw new GovernanceError(response.Err);\n    }\n  };\n\n  /**\n   * Merge two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public mergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<void> => {\n    const rawRequest = toMergeRequest(request);\n\n    return manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Simulate merging two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public simulateMergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<NeuronInfo> => {\n    const rawRequest = toMergeRequest(request);\n\n    const command = await simulateManageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n\n    let merge: MergeResponse | undefined;\n    let neuronInfo: RawNeuronInfo | undefined;\n    let rawNeuron: RawNeuron | undefined;\n    let neuronId: NeuronId | undefined;\n\n    if (\n      \"Merge\" in command &&\n      nonNullish((merge = command.Merge)) &&\n      nonNullish((neuronInfo = fromNullable(merge.target_neuron_info))) &&\n      nonNullish((rawNeuron = fromNullable(merge.target_neuron))) &&\n      nonNullish((neuronId = fromNullable(rawNeuron.id)?.id))\n    ) {\n      return toNeuronInfo({\n        neuronId,\n        neuronInfo,\n        rawNeuron,\n        canisterId: this.canisterId,\n      });\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `simulateMergeNeurons: Unrecognized Merge error in ${JSON.stringify(\n        command,\n      )}`,\n    );\n  };\n\n  /**\n   * Splits a neuron creating a new one\n   *\n   * @returns newNeuronId\n   * @throws {@link GovernanceError}\n   */\n  public splitNeuron = async ({\n    neuronId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    amount: bigint;\n  }): Promise<NeuronId> => {\n    const request = toSplitRawRequest({\n      neuronId,\n      amount,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n\n    if (\"Split\" in command) {\n      const neuron = fromNullable(command.Split.created_neuron_id);\n      if (isNullish(neuron)) {\n        // Edge case\n        throw new GovernanceError({\n          error_message:\n            \"Unexpected error splitting neuron. No neuronId in Split response.\",\n          error_type: 0,\n        });\n      }\n      return neuron.id;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Split error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Returns single proposal info\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public getProposal = async ({\n    proposalId,\n    certified = true,\n  }: {\n    proposalId: bigint;\n    certified?: boolean;\n  }): Promise<ProposalInfo | undefined> => {\n    const [proposalInfo]: [] | [RawProposalInfo] =\n      await this.getGovernanceService(certified).get_proposal_info(proposalId);\n    return proposalInfo ? toProposalInfo(proposalInfo) : undefined;\n  };\n\n  /**\n   * Create new proposal\n   *\n   * @throws {@link GovernanceError}\n   */\n  public makeProposal = async (request: MakeProposalRequest): Promise<void> => {\n    const rawRequest = toMakeProposalRawRequest(request);\n\n    return manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   *\n   * Registers vote for a proposal from the neuron passed.\n   *\n   * @throws {@link GovernanceError}\n   */\n  public registerVote = async ({\n    neuronId,\n    vote,\n    proposalId,\n  }: {\n    neuronId: NeuronId;\n    vote: Vote;\n    proposalId: ProposalId;\n  }): Promise<void> => {\n    const request = toRegisterVoteRequest({ neuronId, vote, proposalId });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Edit neuron followees per topic\n   *\n   * @throws {@link GovernanceError}\n   */\n  public setFollowees = async (followRequest: FollowRequest): Promise<void> => {\n    const request = toManageNeuronsFollowRequest(followRequest);\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Disburse neuron on Account\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public disburse = async ({\n    neuronId,\n    toAccountId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    toAccountId?: string;\n    amount?: E8s;\n  }): Promise<void> => {\n    if (nonNullish(toAccountId)) {\n      // Might throw InvalidAccountIDError\n      checkAccountId(toAccountId);\n    }\n    if (this.hardwareWallet) {\n      return this.disburseHardwareWallet({ neuronId, toAccountId, amount });\n    }\n    // TODO: Test that the new way also works for disbursements.\n    const toAccountIdentifier = nonNullish(toAccountId)\n      ? AccountIdentifier.fromHex(toAccountId)\n      : undefined;\n    const request = toDisburseNeuronRequest({\n      neuronId,\n      toAccountIdentifier,\n      amount,\n    });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public mergeMaturity = async ({\n    neuronId,\n    percentageToMerge,\n  }: {\n    neuronId: NeuronId;\n    percentageToMerge: number;\n  }): Promise<void> => {\n    // Might throw InvalidPercentageError\n    assertPercentageNumber(percentageToMerge);\n\n    if (this.hardwareWallet) {\n      return this.mergeMaturityHardwareWallet({ neuronId, percentageToMerge });\n    }\n\n    const request = toMergeMaturityRequest({ neuronId, percentageToMerge });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stake the maturity of a neuron.\n   *\n   * @param {neuronId: NeuronId; percentageToStake: number;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to stake the maturity\n   * @param {number} percentageToStake Optional. Percentage of the current maturity to stake. If not provided, all of the neuron's current maturity will be staked.\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public stakeMaturity = async ({\n    neuronId,\n    percentageToStake,\n  }: {\n    neuronId: NeuronId;\n    percentageToStake?: number;\n  }): Promise<void> => {\n    assertPercentageNumber(percentageToStake ?? 100);\n\n    await manageNeuron({\n      request: toStakeMaturityRequest({ neuronId, percentageToStake }),\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public spawnNeuron = async ({\n    neuronId,\n    percentageToSpawn,\n    newController,\n    nonce,\n  }: {\n    neuronId: NeuronId;\n    percentageToSpawn?: number;\n    newController?: Principal;\n    nonce?: bigint;\n  }): Promise<bigint> => {\n    if (nonNullish(percentageToSpawn)) {\n      // Migth throw InvalidPercentageError\n      assertPercentageNumber(percentageToSpawn);\n    }\n    if (this.hardwareWallet) {\n      return this.spawnHardwareWallet({\n        neuronId,\n        percentageToSpawn,\n        newController: newController?.toText(),\n      });\n    }\n\n    const request = toSpawnNeuronRequest({\n      neuronId,\n      percentageToSpawn,\n      newController,\n      nonce,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n    let createdNeuronId: NeuronId | undefined;\n\n    if (\n      \"Spawn\" in command &&\n      nonNullish(\n        (createdNeuronId = fromNullable(command.Spawn.created_neuron_id)?.id),\n      )\n    ) {\n      return createdNeuronId;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Spawn error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Add hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public addHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.addHotkeyHardwareWallet({ neuronId, principal });\n    }\n\n    const request = toAddHotkeyRequest({ neuronId, principal });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Remove hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public removeHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    if (this.hardwareWallet) {\n      return this.removeHotkeyHardwareWallet({ neuronId, principal });\n    }\n    const request = toRemoveHotkeyRequest({ neuronId, principal });\n\n    return manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Gets the NeuronID of a newly created neuron.\n   */\n  public claimOrRefreshNeuronFromAccount = async ({\n    memo,\n    controller,\n  }: {\n    memo: bigint;\n    controller?: Principal;\n  }): Promise<NeuronId | undefined> => {\n    const rawRequest = toClaimOrRefreshRequest({\n      memo,\n      controller,\n    });\n    const rawResponse = await this.certifiedService.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  /**\n   * Refreshes neuron and returns neuronId when successful\n   * Uses query call only.\n   *\n   * @throws {@link UnrecognizedTypeError}\n   */\n  public claimOrRefreshNeuron = async (\n    request: ClaimOrRefreshNeuronRequest,\n  ): Promise<NeuronId | undefined> => {\n    const rawRequest = fromClaimOrRefreshNeuronRequest(request);\n    const rawResponse = await this.service.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  private buildNeuronStakeSubAccount = (\n    nonce: Uint8Array,\n    principal: Principal,\n  ): SubAccount => {\n    const padding = asciiStringToByteArray(\"neuron-stake\");\n    const shaObj = sha256.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        0x0c,\n        ...padding,\n        ...principal.toUint8Array(),\n        ...nonce,\n      ]),\n    );\n    return SubAccount.fromBytes(shaObj.digest()) as SubAccount;\n  };\n\n  private getGovernanceService(certified: boolean): GovernanceService {\n    return certified ? this.certifiedService : this.service;\n  }\n\n  /**\n   * Return the data of the neuron provided as id.\n   */\n  public getNeuron = async ({\n    certified = true,\n    neuronId,\n  }: {\n    certified: boolean;\n    neuronId: NeuronId;\n  }): Promise<NeuronInfo | undefined> => {\n    // The governance canister exposes two functions \"get_neuron_info\" and \"get_full_neuron\" that could probably be used to fetch the neuron details too.\n    // However historically this function has been resolved with a single call \"list_neurons\".\n\n    const [neuron]: NeuronInfo[] = await this.listNeurons({\n      certified,\n      neuronIds: [neuronId],\n    });\n\n    return neuron;\n  };\n\n  private listNeuronsHardwareWallet = async (): Promise<Array<NeuronInfo>> => {\n    const {\n      ListNeurons: ListNeuronsConstructor,\n      ListNeuronsResponse: ListNeuronsResponseConstructor,\n    } = await importNnsProto();\n\n    // We can't pass a list of neuron ids, the HW cannot handle it.\n    const request = new ListNeuronsConstructor();\n    request.setIncludeNeuronsReadableByCaller(true);\n\n    const rawResponse = await updateCall({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"list_neurons_pb\",\n      arg: request.serializeBinary(),\n    });\n\n    const response =\n      ListNeuronsResponseConstructor.deserializeBinary(rawResponse);\n    const pbNeurons = response.getFullNeuronsList();\n    return response\n      .getNeuronIdsList()\n      .map(\n        convertPbNeuronToNeuronInfo({ pbNeurons, canisterId: this.canisterId }),\n      );\n  };\n\n  private manageNeuronUpdateCall = async (\n    rawRequest: PbManageNeuron,\n  ): Promise<void> => {\n    const rawResponse = await updateCall({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"manage_neuron_pb\",\n      arg: rawRequest.serializeBinary(),\n    });\n\n    await checkPbManageNeuronResponse(rawResponse);\n  };\n\n  private addHotkeyHardwareWallet = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const rawRequest = await fromAddHotKeyRequest({\n      neuronId,\n      principal: principal.toText(),\n    });\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private removeHotkeyHardwareWallet = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const rawRequest = await fromRemoveHotKeyRequest({\n      neuronId,\n      principal: principal.toText(),\n    });\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private increaseDissolveDelayHardwareWallet = async ({\n    neuronId,\n    additionalDissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    additionalDissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const rawRequest = await fromIncreaseDissolveDelayRequest({\n      neuronId,\n      additionalDissolveDelaySeconds,\n    });\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private startDissolvingHardwareWallet = async (\n    neuronId: NeuronId,\n  ): Promise<void> => {\n    const rawRequest = await fromStartDissolvingRequest(neuronId);\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private stopDissolvingHardwareWallet = async (\n    neuronId: NeuronId,\n  ): Promise<void> => {\n    const rawRequest = await fromStopDissolvingRequest(neuronId);\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private joinCommunityFundHardwareWallet = async (\n    neuronId: NeuronId,\n  ): Promise<void> => {\n    const rawRequest = await fromCommunityFundRequest(neuronId);\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private disburseHardwareWallet = async (\n    request: DisburseRequest,\n  ): Promise<void> => {\n    const rawRequest = await fromDisburseRequest(request);\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private mergeMaturityHardwareWallet = async (\n    request: MergeMaturityRequest,\n  ): Promise<void> => {\n    const rawRequest = await fromMergeMaturityRequest(request);\n    await this.manageNeuronUpdateCall(rawRequest);\n  };\n\n  private spawnHardwareWallet = async (\n    request: SpawnRequest,\n  ): Promise<NeuronId> => {\n    const rawRequest = await fromSpawnRequest(request);\n    const rawResponse = await updateCall({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"manage_neuron_pb\",\n      arg: rawRequest.serializeBinary(),\n    });\n\n    const { ManageNeuronResponse: ManageNeuronResponseConstructor } =\n      await importNnsProto();\n\n    const response =\n      ManageNeuronResponseConstructor.deserializeBinary(rawResponse);\n    const err = response.getError();\n    if (err) {\n      throw new GovernanceError({\n        error_message: err.getErrorMessage(),\n        error_type: err.getErrorType(),\n      });\n    }\n    const createdNeuronId = response.getSpawn()?.getCreatedNeuronId();\n    if (nonNullish(createdNeuronId)) {\n      return BigInt(createdNeuronId.getId());\n    }\n    throw new UnrecognizedTypeError(\n      `Unrecognized Spawn error in ${JSON.stringify(response)}`,\n    );\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const MostRecentMonthlyNodeProviderRewards = IDL.Record({\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(NeuronId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(NeuronId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_icp_e8s' : IDL.Nat64,\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const ApproveGenesisKyc = IDL.Record({\n    'principals' : IDL.Vec(IDL.Principal),\n  });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : ApproveGenesisKyc,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'cf_participants' : IDL.Vec(CfParticipant),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MostRecentMonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : RewardNodeProviders,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const Result_6 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'before_proposal' : IDL.Opt(NeuronId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_7 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_7),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], []),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        [],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], []),\n    'get_metrics' : IDL.Func([], [Result_3], []),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MostRecentMonthlyNodeProviderRewards)],\n        [],\n      ),\n    'get_network_economics_parameters' : IDL.Func([], [NetworkEconomics], []),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], []),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], []),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        [],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_6], []),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], []),\n    'get_proposal_info' : IDL.Func([IDL.Nat64], [IDL.Opt(ProposalInfo)], []),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], []),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n    'list_node_providers' : IDL.Func([], [ListNodeProvidersResponse], []),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        [],\n      ),\n    'manage_neuron' : IDL.Func([ManageNeuron], [ManageNeuronResponse], []),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuron],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const MostRecentMonthlyNodeProviderRewards = IDL.Record({\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(NeuronId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(NeuronId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_icp_e8s' : IDL.Nat64,\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const ApproveGenesisKyc = IDL.Record({\n    'principals' : IDL.Vec(IDL.Principal),\n  });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : ApproveGenesisKyc,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'cf_participants' : IDL.Vec(CfParticipant),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MostRecentMonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const MostRecentMonthlyNodeProviderRewards = IDL.Record({\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(NeuronId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(NeuronId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_icp_e8s' : IDL.Nat64,\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const ApproveGenesisKyc = IDL.Record({\n    'principals' : IDL.Vec(IDL.Principal),\n  });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : ApproveGenesisKyc,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'cf_participants' : IDL.Vec(CfParticipant),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MostRecentMonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : RewardNodeProviders,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const Result_6 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'before_proposal' : IDL.Opt(NeuronId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_7 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_7),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], ['query']),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        ['query'],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], ['query']),\n    'get_metrics' : IDL.Func([], [Result_3], ['query']),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MostRecentMonthlyNodeProviderRewards)],\n        ['query'],\n      ),\n    'get_network_economics_parameters' : IDL.Func(\n        [],\n        [NetworkEconomics],\n        ['query'],\n      ),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], ['query']),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        ['query'],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_6], ['query']),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], ['query']),\n    'get_proposal_info' : IDL.Func(\n        [IDL.Nat64],\n        [IDL.Opt(ProposalInfo)],\n        ['query'],\n      ),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], ['query']),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], ['query']),\n    'list_node_providers' : IDL.Func(\n        [],\n        [ListNodeProvidersResponse],\n        ['query'],\n      ),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        ['query'],\n      ),\n    'manage_neuron' : IDL.Func([ManageNeuron], [ManageNeuronResponse], []),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuron],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const MostRecentMonthlyNodeProviderRewards = IDL.Record({\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(NeuronId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(NeuronId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_icp_e8s' : IDL.Nat64,\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const ApproveGenesisKyc = IDL.Record({\n    'principals' : IDL.Vec(IDL.Principal),\n  });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : ApproveGenesisKyc,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'cf_participants' : IDL.Vec(CfParticipant),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MostRecentMonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "import { Principal } from \"@dfinity/principal\";\nimport { arrayBufferToUint8Array, toNullable } from \"@dfinity/utils\";\nimport type {\n  AccountIdentifier as RawAccountIdentifier,\n  Action as RawAction,\n  Amount,\n  By as RawBy,\n  Change as RawChange,\n  Command as RawCommand,\n  Countries as RawCountries,\n  CreateServiceNervousSystem as RawCreateServiceNervousSystem,\n  DeveloperDistribution as RawDeveloperDistribution,\n  Duration as RawDuration,\n  Followees as RawFollowees,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  LedgerParameters as RawLedgerParameters,\n  ListNeurons as RawListNeurons,\n  ListProposalInfo,\n  ManageNeuron as RawManageNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Percentage as RawPercentage,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport type { AccountIdentifier as AccountIdentifierClass } from \"../../account_identifier\";\nimport type { Vote } from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type { AccountIdentifier, E8s, NeuronId } from \"../../types/common\";\nimport type {\n  Action,\n  By,\n  Change,\n  ClaimOrRefreshNeuronRequest,\n  Command,\n  Countries,\n  CreateServiceNervousSystem,\n  DeveloperDistribution,\n  DisburseToNeuronRequest,\n  Duration,\n  FollowRequest,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  LedgerParameters,\n  ListProposalsRequest,\n  MakeProposalRequest,\n  ManageNeuron,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NodeProvider,\n  Operation,\n  Percentage,\n  ProposalId,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\nimport { accountIdentifierToBytes } from \"../../utils/account_identifier.utils\";\n\nconst fromProposalId = (proposalId: ProposalId): RawNeuronId => ({\n  id: proposalId,\n});\n\nconst fromNeuronId = (neuronId: NeuronId): RawNeuronId => ({\n  id: neuronId,\n});\n\nconst fromFollowees = (followees: Array<NeuronId>): RawFollowees => ({\n  followees: followees.map(fromNeuronId),\n});\n\nconst fromNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: NeuronIdOrSubaccount,\n): RawNeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: { id: neuronIdOrSubaccount.NeuronId } };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return { Subaccount: Uint8Array.from(neuronIdOrSubaccount.Subaccount) };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst fromPercentage = (percentage: Percentage): RawPercentage =>\n  percentage.basisPoints !== undefined\n    ? { basis_points: [percentage.basisPoints] }\n    : { basis_points: [] };\n\nconst fromDuration = (duration: Duration): RawDuration =>\n  duration.seconds !== undefined\n    ? { seconds: [duration.seconds] }\n    : { seconds: [] };\n\nconst fromGlobalTimeOfDay = (time: GlobalTimeOfDay): RawGlobalTimeOfDay =>\n  time.secondsAfterUtcMidnight !== undefined\n    ? { seconds_after_utc_midnight: [time.secondsAfterUtcMidnight] }\n    : { seconds_after_utc_midnight: [] };\n\nconst fromCountries = (countries: Countries): RawCountries => ({\n  iso_codes: countries.isoCodes,\n});\n\nconst fromTokens = (tokens: Tokens): RawTokens =>\n  tokens.e8s !== undefined ? { e8s: [tokens.e8s] } : { e8s: [] };\n\nconst fromImage = (image: Image): RawImage =>\n  image.base64Encoding !== undefined\n    ? { base64_encoding: [image.base64Encoding] }\n    : { base64_encoding: [] };\n\nconst fromVotingRewardParameters = (\n  votingRewardParameters: VotingRewardParameters,\n): RawVotingRewardParameters => ({\n  reward_rate_transition_duration:\n    votingRewardParameters.rewardRateTransitionDuration !== undefined\n      ? [fromDuration(votingRewardParameters.rewardRateTransitionDuration)]\n      : [],\n  initial_reward_rate:\n    votingRewardParameters.initialRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.initialRewardRate)]\n      : [],\n  final_reward_rate:\n    votingRewardParameters.finalRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.finalRewardRate)]\n      : [],\n});\n\nconst fromLedgerParameters = (\n  ledgerParameters: LedgerParameters,\n): RawLedgerParameters => ({\n  transaction_fee:\n    ledgerParameters.transactionFee !== undefined\n      ? [fromTokens(ledgerParameters.transactionFee)]\n      : [],\n  token_symbol:\n    ledgerParameters.tokenSymbol !== undefined\n      ? [ledgerParameters.tokenSymbol]\n      : [],\n  token_logo:\n    ledgerParameters.tokenLogo !== undefined\n      ? [fromImage(ledgerParameters.tokenLogo)]\n      : [],\n  token_name:\n    ledgerParameters.tokenName !== undefined\n      ? [ledgerParameters.tokenName]\n      : [],\n});\n\nconst fromSwapParameters = (\n  swapParameters: SwapParameters,\n): RawSwapParameters => ({\n  minimum_participants:\n    swapParameters.minimumParticipants !== undefined\n      ? [swapParameters.minimumParticipants]\n      : [],\n  duration:\n    swapParameters.duration !== undefined\n      ? [fromDuration(swapParameters.duration)]\n      : [],\n  neuron_basket_construction_parameters:\n    swapParameters.neuronBasketConstructionParameters !== undefined\n      ? [\n          fromNeuronBasketConstructionParameters(\n            swapParameters.neuronBasketConstructionParameters,\n          ),\n        ]\n      : [],\n  confirmation_text:\n    swapParameters.confirmationText !== undefined\n      ? [swapParameters.confirmationText]\n      : [],\n  maximum_participant_icp:\n    swapParameters.maximumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.maximumParticipantIcp)]\n      : [],\n  neurons_fund_investment_icp:\n    swapParameters.neuronsFundInvestmentIcp !== undefined\n      ? [fromTokens(swapParameters.neuronsFundInvestmentIcp)]\n      : [],\n  minimum_icp:\n    swapParameters.minimumIcp !== undefined\n      ? [fromTokens(swapParameters.minimumIcp)]\n      : [],\n  minimum_participant_icp:\n    swapParameters.minimumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.minimumParticipantIcp)]\n      : [],\n  start_time:\n    swapParameters.startTime !== undefined\n      ? [fromGlobalTimeOfDay(swapParameters.startTime)]\n      : [],\n  maximum_icp:\n    swapParameters.maximumIcp !== undefined\n      ? [fromTokens(swapParameters.maximumIcp)]\n      : [],\n  restricted_countries:\n    swapParameters.restrictedCountries !== undefined\n      ? [fromCountries(swapParameters.restrictedCountries)]\n      : [],\n});\n\nconst fromNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters: NeuronBasketConstructionParameters,\n): RawNeuronBasketConstructionParameters => ({\n  dissolve_delay_interval:\n    neuronBasketConstructionParameters.dissolveDelayInterval !== undefined\n      ? [fromDuration(neuronBasketConstructionParameters.dissolveDelayInterval)]\n      : [],\n  count:\n    neuronBasketConstructionParameters.count !== undefined\n      ? [neuronBasketConstructionParameters.count]\n      : [],\n});\n\nconst fromGovernanceParameters = (\n  governanceParameters: GovernanceParameters,\n): RawGovernanceParameters => ({\n  neuron_maximum_dissolve_delay_bonus:\n    governanceParameters.neuronMaximumDissolveDelayBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumDissolveDelayBonus)]\n      : [],\n  neuron_maximum_age_for_age_bonus:\n    governanceParameters.neuronMaximumAgeForAgeBonus !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumAgeForAgeBonus)]\n      : [],\n  neuron_maximum_dissolve_delay:\n    governanceParameters.neuronMaximumDissolveDelay !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumDissolveDelay)]\n      : [],\n  neuron_minimum_dissolve_delay_to_vote:\n    governanceParameters.neuronMinimumDissolveDelayToVote !== undefined\n      ? [fromDuration(governanceParameters.neuronMinimumDissolveDelayToVote)]\n      : [],\n  neuron_maximum_age_bonus:\n    governanceParameters.neuronMaximumAgeBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumAgeBonus)]\n      : [],\n  neuron_minimum_stake:\n    governanceParameters.neuronMinimumStake !== undefined\n      ? [fromTokens(governanceParameters.neuronMinimumStake)]\n      : [],\n  proposal_wait_for_quiet_deadline_increase:\n    governanceParameters.proposalWaitForQuietDeadlineIncrease !== undefined\n      ? [\n          fromDuration(\n            governanceParameters.proposalWaitForQuietDeadlineIncrease,\n          ),\n        ]\n      : [],\n  proposal_initial_voting_period:\n    governanceParameters.proposalInitialVotingPeriod !== undefined\n      ? [fromDuration(governanceParameters.proposalInitialVotingPeriod)]\n      : [],\n  proposal_rejection_fee:\n    governanceParameters.proposalRejectionFee !== undefined\n      ? [fromTokens(governanceParameters.proposalRejectionFee)]\n      : [],\n  voting_reward_parameters:\n    governanceParameters.votingRewardParameters !== undefined\n      ? [\n          fromVotingRewardParameters(\n            governanceParameters.votingRewardParameters,\n          ),\n        ]\n      : [],\n});\n\nconst fromSwapDistribution = (\n  swapDistribution: SwapDistribution,\n): RawSwapDistribution => ({\n  total:\n    swapDistribution.total !== undefined\n      ? [fromTokens(swapDistribution.total)]\n      : [],\n});\n\nconst fromInitialTokenDistribution = (\n  initialTokenDistribution: InitialTokenDistribution,\n): RawInitialTokenDistribution => ({\n  treasury_distribution:\n    initialTokenDistribution.treasuryDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.treasuryDistribution)]\n      : [],\n  developer_distribution:\n    initialTokenDistribution.developerDistribution !== undefined\n      ? [\n          fromDeveloperDistribution(\n            initialTokenDistribution.developerDistribution,\n          ),\n        ]\n      : [],\n  swap_distribution:\n    initialTokenDistribution.swapDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.swapDistribution)]\n      : [],\n});\n\nconst fromNeuronDistribution = (\n  neuronDistribution: NeuronDistribution,\n): RawNeuronDistribution => ({\n  controller:\n    neuronDistribution.controller !== undefined\n      ? [Principal.fromText(neuronDistribution.controller)]\n      : [],\n  dissolve_delay:\n    neuronDistribution.dissolveDelay !== undefined\n      ? [fromDuration(neuronDistribution.dissolveDelay)]\n      : [],\n  memo: neuronDistribution.memo !== undefined ? [neuronDistribution.memo] : [],\n  vesting_period:\n    neuronDistribution.vestingPeriod !== undefined\n      ? [fromDuration(neuronDistribution.vestingPeriod)]\n      : [],\n  stake:\n    neuronDistribution.stake !== undefined\n      ? [fromTokens(neuronDistribution.stake)]\n      : [],\n});\n\nconst fromDeveloperDistribution = (\n  developerDistribution: DeveloperDistribution,\n): RawDeveloperDistribution => ({\n  developer_neurons: developerDistribution.developerNeurons.map(\n    fromNeuronDistribution,\n  ),\n});\n\nconst fromCreateServiceNervousSystem = (\n  createServiceNervousSystem: CreateServiceNervousSystem,\n): RawCreateServiceNervousSystem => ({\n  url:\n    createServiceNervousSystem.url !== undefined\n      ? [createServiceNervousSystem.url]\n      : [],\n  governance_parameters:\n    createServiceNervousSystem.governanceParameters !== undefined\n      ? [\n          fromGovernanceParameters(\n            createServiceNervousSystem.governanceParameters,\n          ),\n        ]\n      : [],\n  fallback_controller_principal_ids:\n    createServiceNervousSystem.fallbackControllerPrincipalIds.map(\n      Principal.fromText,\n    ),\n  logo:\n    createServiceNervousSystem.logo !== undefined\n      ? [fromImage(createServiceNervousSystem.logo)]\n      : [],\n  name:\n    createServiceNervousSystem.name !== undefined\n      ? [createServiceNervousSystem.name]\n      : [],\n  ledger_parameters:\n    createServiceNervousSystem.ledgerParameters !== undefined\n      ? [fromLedgerParameters(createServiceNervousSystem.ledgerParameters)]\n      : [],\n  description:\n    createServiceNervousSystem.description !== undefined\n      ? [createServiceNervousSystem.description]\n      : [],\n  dapp_canisters: createServiceNervousSystem.dappCanisters.map(\n    (principalId) => ({\n      id: [Principal.fromText(principalId)],\n    }),\n  ),\n  swap_parameters:\n    createServiceNervousSystem.swapParameters !== undefined\n      ? [fromSwapParameters(createServiceNervousSystem.swapParameters)]\n      : [],\n  initial_token_distribution:\n    createServiceNervousSystem.initialTokenDistribution !== undefined\n      ? [\n          fromInitialTokenDistribution(\n            createServiceNervousSystem.initialTokenDistribution,\n          ),\n        ]\n      : [],\n});\n\nconst fromAction = (action: Action): RawAction => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    if (executeNnsFunction.payloadBytes === undefined) {\n      throw new Error(\"payloadBytes not found\");\n    }\n\n    return {\n      ExecuteNnsFunction: {\n        nns_function: executeNnsFunction.nnsFunctionId,\n        payload: arrayBufferToUint8Array(executeNnsFunction.payloadBytes),\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: fromManageNeuron(manageNeuron),\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveGenesisKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveGenesisKyc.principals.map(Principal.fromText),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuron_minimum_stake_e8s: networkEconomics.neuronMinimumStake,\n        max_proposals_to_keep_per_topic:\n          networkEconomics.maxProposalsToKeepPerTopic,\n        neuron_management_fee_per_proposal_e8s:\n          networkEconomics.neuronManagementFeePerProposal,\n        reject_cost_e8s: networkEconomics.rejectCost,\n        transaction_fee_e8s: networkEconomics.transactionFee,\n        neuron_spawn_dissolve_delay_seconds:\n          networkEconomics.neuronSpawnDissolveDelaySeconds,\n        minimum_icp_xdr_rate: networkEconomics.minimumIcpXdrRate,\n        maximum_node_provider_rewards_e8s:\n          networkEconomics.maximumNodeProviderRewards,\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        node_provider: rewardNodeProvider.nodeProvider\n          ? [fromNodeProvider(rewardNodeProvider.nodeProvider)]\n          : [],\n        amount_e8s: rewardNodeProvider.amountE8s,\n        reward_mode:\n          rewardNodeProvider.rewardMode != null\n            ? [fromRewardMode(rewardNodeProvider.rewardMode)]\n            : [],\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        use_registry_derived_rewards:\n          rewardNodeProviders.useRegistryDerivedRewards === undefined\n            ? []\n            : [rewardNodeProviders.useRegistryDerivedRewards],\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          node_provider: r.nodeProvider\n            ? [fromNodeProvider(r.nodeProvider)]\n            : [],\n          amount_e8s: r.amountE8s,\n          reward_mode:\n            r.rewardMode != null ? [fromRewardMode(r.rewardMode)] : [],\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change\n          ? [fromChange(addOrRemoveNodeProvider.change)]\n          : [],\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motion_text: motion.motionText,\n      },\n    };\n  }\n\n  if (\"SetDefaultFollowees\" in action) {\n    const setDefaultFollowees = action.SetDefaultFollowees;\n    return {\n      SetDefaultFollowees: {\n        default_followees: setDefaultFollowees.defaultFollowees.map((f) => [\n          f.topic as number,\n          fromFollowees(f.followees),\n        ]),\n      },\n    };\n  }\n\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: {\n        id: [{ id: knownNeuron.id }],\n        known_neuron_data: [\n          {\n            name: knownNeuron.name,\n            description:\n              knownNeuron.description !== undefined\n                ? [knownNeuron.description]\n                : [],\n          },\n        ],\n      },\n    };\n  }\n\n  if (\"SetSnsTokenSwapOpenTimeWindow\" in action) {\n    const { request, swapCanisterId } = action.SetSnsTokenSwapOpenTimeWindow;\n\n    return {\n      SetSnsTokenSwapOpenTimeWindow: {\n        request:\n          request === undefined\n            ? []\n            : [\n                {\n                  open_time_window:\n                    request.openTimeWindow === undefined\n                      ? []\n                      : [\n                          {\n                            start_timestamp_seconds:\n                              request.openTimeWindow.startTimestampSeconds,\n                            end_timestamp_seconds:\n                              request.openTimeWindow.endTimestampSeconds,\n                          },\n                        ],\n                },\n              ],\n\n        swap_canister_id:\n          swapCanisterId === undefined\n            ? []\n            : [Principal.fromText(swapCanisterId)],\n      },\n    };\n  }\n\n  if (\"OpenSnsTokenSwap\" in action) {\n    const { communityFundInvestmentE8s, targetSwapCanisterId, params } =\n      action.OpenSnsTokenSwap;\n\n    return {\n      OpenSnsTokenSwap: {\n        community_fund_investment_e8s: toNullable(communityFundInvestmentE8s),\n        target_swap_canister_id: toNullable(targetSwapCanisterId),\n        params:\n          params === undefined\n            ? []\n            : [\n                {\n                  min_participant_icp_e8s: params.minParticipantIcpE8s,\n                  max_icp_e8s: params.maxIcpE8s,\n                  swap_due_timestamp_seconds: params.swapDueTimestampSeconds,\n                  min_participants: params.minParticipants,\n                  sns_token_e8s: params.snsTokenE8s,\n                  max_participant_icp_e8s: params.maxParticipantIcpE8s,\n                  min_icp_e8s: params.minIcpE8s,\n                  sale_delay_seconds: toNullable(params.saleDelaySeconds),\n                  neuron_basket_construction_parameters: toNullable(\n                    params.neuronBasketConstructionParameters,\n                  ),\n                },\n              ],\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    return {\n      CreateServiceNervousSystem: fromCreateServiceNervousSystem(\n        action.CreateServiceNervousSystem,\n      ),\n    };\n  }\n\n  // If there's a missing action, this line will cause a compiler error.\n  throw new UnsupportedValueError(action);\n};\n\nconst fromCommand = (command: Command): RawCommand => {\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount_e8s: split.amount,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(fromNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by ? [fromClaimOrRefreshBy(claimOrRefresh.by)] : [],\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation\n          ? [fromOperation(configure.operation)]\n          : [],\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal\n          ? [fromProposalId(registerVote.proposal)]\n          : [],\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolve_delay_seconds: disburseToNeuron.dissolveDelaySeconds,\n        kyc_verified: disburseToNeuron.kycVerified,\n        amount_e8s: disburseToNeuron.amount,\n        new_controller: disburseToNeuron.newController\n          ? [Principal.fromText(disburseToNeuron.newController)]\n          : [],\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentage_to_merge: mergeMaturity.percentageToMerge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentageToStake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        url: makeProposal.url,\n        title: [],\n        action: makeProposal.action ? [fromAction(makeProposal.action)] : [],\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        to_account: disburse.toAccountId\n          ? [fromAccountIdentifier(disburse.toAccountId)]\n          : [],\n        amount: disburse.amount ? [fromAmount(disburse.amount)] : [],\n      },\n    };\n  }\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        percentage_to_spawn:\n          spawn.percentageToSpawn === undefined\n            ? []\n            : [spawn.percentageToSpawn],\n        new_controller: spawn.newController\n          ? [Principal.fromText(spawn.newController)]\n          : [],\n        nonce: [],\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        source_neuron_id: merge.sourceNeuronId\n          ? [{ id: merge.sourceNeuronId }]\n          : [],\n      },\n    };\n  }\n\n  // If there's a missing command above, this line will cause a compiler error.\n  throw new UnsupportedValueError(command);\n};\n\nconst fromOperation = (operation: Operation): RawOperation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hot_key_to_remove:\n          removeHotKey.hotKeyToRemove != null\n            ? [Principal.fromText(removeHotKey.hotKeyToRemove)]\n            : [],\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        new_hot_key: addHotKey.newHotKey\n          ? [Principal.fromText(addHotKey.newHotKey)]\n          : [],\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds:\n          increaseDissolveDelay.additionalDissolveDelaySeconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds:\n          setDissolveTimestamp.dissolveTimestampSeconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const { requestedSettingForAutoStakeMaturity } =\n      operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity:\n          requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  // If there's a missing operation above, this line will cause a compiler error.\n  throw new UnsupportedValueError(operation);\n};\n\nconst fromChange = (change: Change): RawChange => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: fromNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: fromNodeProvider(change.ToAdd),\n    };\n  }\n  // If there's a missing change above, this line will cause a compiler error.\n  throw new UnsupportedValueError(change);\n};\n\nconst fromNodeProvider = (nodeProvider: NodeProvider): RawNodeProvider => {\n  return {\n    id: nodeProvider.id != null ? [Principal.fromText(nodeProvider.id)] : [],\n    reward_account:\n      nodeProvider.rewardAccount != null\n        ? [fromAccountIdentifier(nodeProvider.rewardAccount)]\n        : [],\n  };\n};\n\nconst fromAmount = (amount: E8s): Amount => ({\n  e8s: amount,\n});\n\nconst fromAccountIdentifier = (\n  accountIdentifier: AccountIdentifier,\n): RawAccountIdentifier => ({\n  hash: accountIdentifierToBytes(accountIdentifier),\n});\n\nconst fromRewardMode = (rewardMode: RewardMode): RawRewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolve_delay_seconds: rewardMode.RewardToNeuron.dissolveDelaySeconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        to_account:\n          rewardMode.RewardToAccount.toAccount != null\n            ? [fromAccountIdentifier(rewardMode.RewardToAccount.toAccount)]\n            : [],\n      },\n    };\n  } else {\n    // If there's a missing rewardMode above, this line will cause a compiler error.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst fromClaimOrRefreshBy = (by: By): RawBy => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller\n          ? [by.MemoAndController.controller]\n          : [],\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const fromListNeurons = (neuronIds?: NeuronId[]): RawListNeurons => ({\n  neuron_ids: BigUint64Array.from(neuronIds ?? []),\n  include_neurons_readable_by_caller: neuronIds ? false : true,\n});\n\nexport const fromManageNeuron = ({\n  id,\n  command,\n  neuronIdOrSubaccount,\n}: ManageNeuron): RawManageNeuron => ({\n  id: id ? [fromNeuronId(id)] : [],\n  command: command ? [fromCommand(command)] : [],\n  neuron_id_or_subaccount: neuronIdOrSubaccount\n    ? [fromNeuronIdOrSubaccount(neuronIdOrSubaccount)]\n    : [],\n});\n\nexport const fromListProposalsRequest = ({\n  includeRewardStatus,\n  beforeProposal,\n  excludeTopic,\n  includeStatus,\n  limit,\n  includeAllManageNeuronProposals,\n}: ListProposalsRequest): ListProposalInfo => {\n  return {\n    include_reward_status: Int32Array.from(includeRewardStatus),\n    before_proposal: beforeProposal ? [fromProposalId(beforeProposal)] : [],\n    limit: limit,\n    exclude_topic: Int32Array.from(excludeTopic),\n    include_all_manage_neuron_proposals:\n      includeAllManageNeuronProposals !== undefined\n        ? [includeAllManageNeuronProposals]\n        : [],\n    include_status: Int32Array.from(includeStatus),\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromAddHotKeyRequest = (request: AddHotKeyRequest): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const hotkey = new PbManageNeuron.AddHotKey();\n  hotkey.setNewHotKey(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setAddHotKey(hotkey);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n*/\n\nexport const fromClaimOrRefreshNeuronRequest = (\n  request: ClaimOrRefreshNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: { by: [{ NeuronIdOrSubaccount: {} }] },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toClaimOrRefreshRequest = ({\n  memo,\n  controller,\n}: {\n  memo: bigint;\n  controller?: Principal;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: {\n      by: [\n        {\n          MemoAndController: {\n            controller: controller == undefined ? [] : [controller],\n            memo,\n          },\n        },\n      ],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromMergeMaturityRequest = (\n  request: MergeMaturityRequest\n): PbManageNeuron => {\n  const mergeMaturity = new PbManageNeuron.MergeMaturity();\n  mergeMaturity.setPercentageToMerge(request.percentageToMerge);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setMergeMaturity(mergeMaturity);\n  return manageNeuron;\n};\n*/\n\n/* Protobuf is not supported yet\nexport const fromRemoveHotKeyRequest = (\n  request: RemoveHotKeyRequest\n): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const command = new PbManageNeuron.RemoveHotKey();\n  command.setHotKeyToRemove(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setRemoveHotKey(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStartDissolvingRequest = (\n  request: StartDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStartDissolving(new PbManageNeuron.StartDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStopDissolvingRequest = (\n  request: StopDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStopDissolving(new PbManageNeuron.StopDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromIncreaseDissolveDelayRequest = (\n  request: IncreaseDissolveDelayRequest\n): PbManageNeuron => {\n  const command = new PbManageNeuron.IncreaseDissolveDelay();\n  command.setAdditionalDissolveDelaySeconds(\n    request.additionalDissolveDelaySeconds\n  );\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setIncreaseDissolveDelay(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromFollowRequest = (request: FollowRequest): PbManageNeuron => {\n  const follow = new PbManageNeuron.Follow();\n  follow.setTopic(request.topic);\n  follow.setFolloweesList(\n    request.followees.map((followee) => {\n      const neuronId = new PbNeuronId();\n      neuronId.setId(followee.toString());\n      return neuronId;\n    })\n  );\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setFollow(follow);\n  return manageNeuron;\n};\n\nexport const fromRegisterVoteRequest = (\n  request: RegisterVoteRequest\n): PbManageNeuron => {\n  const registerVote = new PbManageNeuron.RegisterVote();\n  registerVote.setVote(request.vote);\n  const proposal = new PbProposalId();\n  proposal.setId(request.proposal.toString());\n  registerVote.setProposal(proposal);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setRegisterVote(registerVote);\n  return manageNeuron;\n};\n\nexport const fromSpawnRequest = (request: SpawnRequest): PbManageNeuron => {\n  const spawn = new PbManageNeuron.Spawn();\n\n  if (request.newController) {\n    const newController = new PbPrincipalId();\n    newController.setSerializedId(\n      Principal.fromText(request.newController).toUint8Array().slice(4)\n    );\n    spawn.setNewController(newController);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setSpawn(spawn);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const toSplitRawRequest = ({\n  neuronId,\n  amount,\n}: {\n  neuronId: NeuronId;\n  amount: E8s;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    Split: {\n      amount_e8s: amount,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: neuronId } }],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromDisburseRequest = (request: DisburseRequest): PbManageNeuron => {\n  const disburse = new PbManageNeuron.Disburse();\n\n  if (request.toAccountId) {\n    const toAccountIdentifier = new PbAccountIdentifier();\n    toAccountIdentifier.setHash(\n      Uint8Array.from(Buffer.from(request.toAccountId, \"hex\"))\n    );\n    disburse.setToAccount(toAccountIdentifier);\n  }\n\n  if (request.amount != null) {\n    const amount = new PbManageNeuron.Disburse.Amount();\n    amount.setE8s(request.amount.toString());\n    disburse.setAmount(amount);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setDisburse(disburse);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const fromDisburseToNeuronRequest = (\n  request: DisburseToNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    DisburseToNeuron: {\n      dissolve_delay_seconds: request.dissolveDelaySeconds,\n      kyc_verified: request.kycVerified,\n      amount_e8s: request.amount,\n      new_controller:\n        request.newController != null\n          ? [Principal.fromText(request.newController)]\n          : [],\n      nonce: request.nonce,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const fromMakeProposalRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toRegisterVoteRequest = ({\n  neuronId,\n  vote,\n  proposalId,\n}: {\n  neuronId: NeuronId;\n  vote: Vote;\n  proposalId: ProposalId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      RegisterVote: {\n        vote,\n        proposal: [{ id: proposalId }],\n      },\n    },\n  });\n\nexport const toMakeProposalRawRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toManageNeuronsFollowRequest = ({\n  neuronId,\n  topic,\n  followees,\n}: FollowRequest): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Follow: {\n        topic,\n        followees: followees.map((followeeId) => ({ id: followeeId })),\n      },\n    },\n  });\n\nexport const toDisburseNeuronRequest = ({\n  neuronId,\n  toAccountIdentifier,\n  amount,\n}: {\n  neuronId: NeuronId;\n  toAccountIdentifier?: AccountIdentifierClass;\n  amount?: E8s;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Disburse: {\n        to_account:\n          toAccountIdentifier !== undefined\n            ? [toAccountIdentifier.toAccountIdentifierHash()]\n            : [],\n        amount: amount !== undefined ? [fromAmount(amount)] : [],\n      },\n    },\n  });\n\nexport const toMergeMaturityRequest = ({\n  neuronId,\n  percentageToMerge,\n}: {\n  neuronId: NeuronId;\n  percentageToMerge: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      MergeMaturity: {\n        percentage_to_merge: percentageToMerge,\n      },\n    },\n  });\n\nexport const toStakeMaturityRequest = ({\n  neuronId,\n  percentageToStake,\n}: {\n  neuronId: NeuronId;\n  percentageToStake?: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    },\n  });\n\nexport const toSpawnNeuronRequest = ({\n  neuronId,\n  percentageToSpawn,\n  newController,\n  nonce,\n}: {\n  neuronId: NeuronId;\n  percentageToSpawn?: number;\n  newController?: Principal;\n  nonce?: bigint;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Spawn: {\n        percentage_to_spawn:\n          percentageToSpawn === undefined ? [] : [percentageToSpawn],\n        new_controller: newController === undefined ? [] : [newController],\n        nonce: nonce === undefined ? [] : [nonce],\n      },\n    },\n  });\n\nexport const toAddHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      AddHotKey: {\n        new_hot_key: [principal],\n      },\n    },\n  });\n\nexport const toRemoveHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      RemoveHotKey: {\n        hot_key_to_remove: [principal],\n      },\n    },\n  });\n\nexport const toIncreaseDissolveDelayRequest = ({\n  neuronId,\n  additionalDissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  additionalDissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds: additionalDissolveDelaySeconds,\n      },\n    },\n  });\n\nexport const toSetDissolveDelayRequest = ({\n  neuronId,\n  dissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  dissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds: BigInt(dissolveDelaySeconds),\n      },\n    },\n  });\n\nexport const toJoinCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      JoinCommunityFund: {},\n    },\n  });\n\nexport const toAutoStakeMaturityRequest = ({\n  neuronId,\n  autoStake,\n}: {\n  neuronId: NeuronId;\n  autoStake: boolean;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity: autoStake,\n      },\n    },\n  });\n\nexport const toLeaveCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      LeaveCommunityFund: {},\n    },\n  });\n\nexport const toMergeRequest = ({\n  sourceNeuronId,\n  targetNeuronId,\n}: {\n  sourceNeuronId: NeuronId;\n  targetNeuronId: NeuronId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId: targetNeuronId,\n    command: {\n      Merge: { source_neuron_id: [{ id: sourceNeuronId }] },\n    },\n  });\n\nexport const toStartDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StartDissolving: {},\n    },\n  });\n\nexport const toStopDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StopDissolving: {},\n    },\n  });\n\nexport const toCommand = ({\n  neuronId,\n  command,\n}: {\n  neuronId: NeuronId;\n  command: RawCommand;\n}): RawManageNeuron => ({\n  id: [{ id: neuronId }],\n  command: [command],\n  neuron_id_or_subaccount: [],\n});\n\nexport const toConfigureOperation = ({\n  neuronId,\n  operation,\n}: {\n  neuronId: NeuronId;\n  operation: RawOperation;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Configure: {\n        operation: [operation],\n      },\n    },\n  });\n", "import type { GovernanceError as GovernanceErrorDetail } from \"../../candid/governance\";\n\nexport abstract class StakeNeuronError extends Error {}\n\nexport class CouldNotClaimNeuronError extends StakeNeuronError {}\n\nexport class InsufficientAmountError extends StakeNeuronError {\n  constructor(public readonly minimumAmount: bigint) {\n    super();\n  }\n}\n\nexport class UnrecognizedTypeError extends Error {}\nexport class GovernanceError extends Error {\n  constructor(public readonly detail: GovernanceErrorDetail) {\n    super();\n  }\n}\n\nexport class InvalidAccountIDError extends Error {}\n\n/**\n * An error used to ensure at compile-time that it's never reached.\n */\nexport class UnsupportedValueError extends Error {\n  constructor(value: never) {\n    super(\"Unsupported value: \" + value);\n  }\n}\n\nexport class FeatureNotSupportedError extends Error {}\n", "import type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  bigEndianCrc32,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport { sha224 } from \"@noble/hashes/sha256\";\nimport { Buffer } from \"buffer\";\nimport type { AccountIdentifier } from \"../types/common\";\n\nexport const accountIdentifierToBytes = (\n  accountIdentifier: AccountIdentifier,\n): Uint8Array =>\n  Uint8Array.from(Buffer.from(accountIdentifier, \"hex\")).subarray(4);\n\nexport const accountIdentifierFromBytes = (\n  accountIdentifier: Uint8Array,\n): AccountIdentifier => Buffer.from(accountIdentifier).toString(\"hex\");\n\nexport const principalToAccountIdentifier = (\n  principal: Principal,\n  subAccount?: Uint8Array,\n): string => {\n  // Hash (sha224) the principal, the subAccount and some padding\n  const padding = asciiStringToByteArray(\"\\x0Aaccount-id\");\n\n  const shaObj = sha224.create();\n  shaObj.update(\n    arrayOfNumberToUint8Array([\n      ...padding,\n      ...principal.toUint8Array(),\n      ...(subAccount ?? Array(32).fill(0)),\n    ]),\n  );\n  const hash = shaObj.digest();\n\n  // Prepend the checksum of the hash and convert to a hex string\n  const checksum = bigEndianCrc32(hash);\n  const bytes = new Uint8Array([...checksum, ...hash]);\n  return uint8ArrayToHexString(bytes);\n};\n", "import type { ManageNeuron as PbManageNeuron } from \"@dfinity/nns-proto\";\nimport { Principal } from \"@dfinity/principal\";\nimport type { NeuronId } from \"../../types/common\";\nimport type {\n  AddHotKeyRequest,\n  DisburseRequest,\n  FollowRequest,\n  MergeMaturityRequest,\n  RemoveHotKeyRequest,\n  SpawnRequest,\n} from \"../../types/governance_converters\";\nimport { importNnsProto } from \"../../utils/proto.utils\";\n\n// Original `ts` implementation:\n// nns-dapp/frontend/ts/src/canisters/governance/RequestConverters.ts /\n// https://github.com/dfinity/nns-dapp/blob/main/frontend/ts/src/canisters/governance/RequestConverters.ts\n\nexport const fromAddHotKeyRequest = async (\n  request: AddHotKeyRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    PrincipalId: PrincipalIdConstructor,\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const hotkeyPrincipal = new PrincipalIdConstructor();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array(),\n  );\n\n  const hotkey = new ManageNeuronConstructor.AddHotKey();\n  hotkey.setNewHotKey(hotkeyPrincipal);\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setAddHotKey(hotkey);\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromRemoveHotKeyRequest = async (\n  request: RemoveHotKeyRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    PrincipalId: PrincipalIdConstructor,\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const hotkeyPrincipal = new PrincipalIdConstructor();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array(),\n  );\n\n  const command = new ManageNeuronConstructor.RemoveHotKey();\n  command.setHotKeyToRemove(hotkeyPrincipal);\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setRemoveHotKey(command);\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromIncreaseDissolveDelayRequest = async ({\n  neuronId,\n  additionalDissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  additionalDissolveDelaySeconds: number;\n}): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const command = new ManageNeuronConstructor.IncreaseDissolveDelay();\n  command.setAdditionalDissolveDelaySeconds(additionalDissolveDelaySeconds);\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setIncreaseDissolveDelay(command);\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n\n  const pbNeuronId = new NeuronIdConstructor();\n  pbNeuronId.setId(neuronId.toString());\n  result.setNeuronId(pbNeuronId);\n\n  return result;\n};\n\nexport const fromStartDissolvingRequest = async (\n  neuronId: NeuronId,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setStartDissolving(new ManageNeuronConstructor.StartDissolving());\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n\n  const pbNeuronId = new NeuronIdConstructor();\n  pbNeuronId.setId(neuronId.toString());\n  result.setNeuronId(pbNeuronId);\n\n  return result;\n};\n\nexport const fromStopDissolvingRequest = async (\n  neuronId: NeuronId,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setStopDissolving(new ManageNeuronConstructor.StopDissolving());\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n\n  const pbNeuronId = new NeuronIdConstructor();\n  pbNeuronId.setId(neuronId.toString());\n  result.setNeuronId(pbNeuronId);\n\n  return result;\n};\n\nexport const fromCommunityFundRequest = async (\n  neuronId: NeuronId,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const configure = new ManageNeuronConstructor.Configure();\n  configure.setJoinCommunityFund(\n    new ManageNeuronConstructor.JoinCommunityFund(),\n  );\n\n  const result = new ManageNeuronConstructor();\n  result.setConfigure(configure);\n\n  const pbNeuronId = new NeuronIdConstructor();\n  pbNeuronId.setId(neuronId.toString());\n  result.setNeuronId(pbNeuronId);\n\n  return result;\n};\n\nexport const fromDisburseRequest = async (\n  request: DisburseRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n    AccountIdentifier: AccountIdentifierConstructor,\n  } = await importNnsProto();\n\n  const disburse = new ManageNeuronConstructor.Disburse();\n\n  if (request.toAccountId) {\n    const toAccountIdentifier = new AccountIdentifierConstructor();\n    toAccountIdentifier.setHash(\n      Uint8Array.from(Buffer.from(request.toAccountId, \"hex\")),\n    );\n    disburse.setToAccount(toAccountIdentifier);\n  }\n\n  if (request.amount != null) {\n    const amount = new ManageNeuronConstructor.Disburse.Amount();\n    amount.setE8s(request.amount.toString());\n    disburse.setAmount(amount);\n  }\n\n  const manageNeuron = new ManageNeuronConstructor();\n  manageNeuron.setDisburse(disburse);\n\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n\nexport const fromMergeMaturityRequest = async (\n  request: MergeMaturityRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const mergeMaturity = new ManageNeuronConstructor.MergeMaturity();\n  mergeMaturity.setPercentageToMerge(request.percentageToMerge);\n  const manageNeuron = new ManageNeuronConstructor();\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setMergeMaturity(mergeMaturity);\n  return manageNeuron;\n};\n\nexport const fromSpawnRequest = async (\n  request: SpawnRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n    PrincipalId: PrincipalIdConstructor,\n  } = await importNnsProto();\n\n  const spawn = new ManageNeuronConstructor.Spawn();\n\n  if (request.newController) {\n    const newController = new PrincipalIdConstructor();\n    newController.setSerializedId(\n      Principal.fromText(request.newController).toUint8Array().slice(4),\n    );\n    spawn.setNewController(newController);\n  }\n\n  if (request.percentageToSpawn !== undefined) {\n    spawn.setPercentageToSpawn(request.percentageToSpawn);\n  }\n\n  const manageNeuron = new ManageNeuronConstructor();\n  manageNeuron.setSpawn(spawn);\n\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n\nexport const fromFollowRequest = async (\n  request: FollowRequest,\n): Promise<PbManageNeuron> => {\n  const {\n    ManageNeuron: ManageNeuronConstructor,\n    NeuronId: NeuronIdConstructor,\n  } = await importNnsProto();\n\n  const follow = new ManageNeuronConstructor.Follow();\n  follow.setTopic(request.topic);\n  follow.setFolloweesList(\n    request.followees.map((followee) => {\n      const neuronId = new NeuronIdConstructor();\n      neuronId.setId(followee.toString());\n      return neuronId;\n    }),\n  );\n  const manageNeuron = new ManageNeuronConstructor();\n  const neuronId = new NeuronIdConstructor();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setFollow(follow);\n  return manageNeuron;\n};\n", "import type {\n  BallotInfo as PbBallotInfo,\n  ListNeuronsResponse,\n  Neuron as PbNeuron,\n  NeuronInfo as PbNeuronInfo,\n  PrincipalId,\n} from \"@dfinity/nns-proto\";\nimport { Principal } from \"@dfinity/principal\";\nimport {\n  fromDefinedNullable,\n  fromNullable,\n  uint8ArrayToArrayOfNumber,\n} from \"@dfinity/utils\";\nimport type { Map } from \"google-protobuf\";\nimport type {\n  AccountIdentifier as RawAccountIdentifier,\n  Action as RawAction,\n  Amount as RawAmount,\n  Ballot as RawBallot,\n  BallotInfo as RawBallotInfo,\n  By as RawBy,\n  Canister as RawCanister,\n  Change as RawChange,\n  Command as RawCommand,\n  Countries as RawCountries,\n  DeveloperDistribution as RawDeveloperDistribution,\n  DissolveState as RawDissolveState,\n  Duration as RawDuration,\n  Followees as RawFollowees,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  KnownNeuron as RawKnownNeuron,\n  LedgerParameters as RawLedgerParameters,\n  ListNeuronsResponse as RawListNeuronsResponse,\n  ListProposalInfoResponse as RawListProposalInfoResponse,\n  Neuron as RawNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NeuronInfo as RawNeuronInfo,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Params,\n  Percentage as RawPercentage,\n  Proposal as RawProposal,\n  ProposalInfo as RawProposalInfo,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tally as RawTally,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport { AccountIdentifier, SubAccount } from \"../../account_identifier\";\nimport { NeuronState } from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type {\n  AccountIdentifier as AccountIdentifierString,\n  CanisterIdString,\n  E8s,\n  NeuronId,\n} from \"../../types/common\";\nimport type {\n  Action,\n  Ballot,\n  BallotInfo,\n  By,\n  Change,\n  Command,\n  Countries,\n  DeveloperDistribution,\n  DissolveState,\n  Duration,\n  Followees,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  KnownNeuron,\n  LedgerParameters,\n  ListProposalsResponse,\n  Neuron,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NeuronInfo,\n  NodeProvider,\n  Operation,\n  Percentage,\n  Proposal,\n  ProposalInfo,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tally,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\nimport {\n  accountIdentifierFromBytes,\n  principalToAccountIdentifier,\n} from \"../../utils/account_identifier.utils\";\n\nexport const toNeuronInfo = ({\n  neuronId,\n  neuronInfo,\n  rawNeuron,\n  canisterId,\n}: {\n  neuronId: bigint;\n  neuronInfo: RawNeuronInfo;\n  rawNeuron?: RawNeuron;\n  canisterId: Principal;\n}): NeuronInfo => {\n  const fullNeuron = rawNeuron\n    ? toNeuron({ neuron: rawNeuron, canisterId })\n    : undefined;\n  return {\n    neuronId: neuronId,\n    dissolveDelaySeconds: neuronInfo.dissolve_delay_seconds,\n    recentBallots: neuronInfo.recent_ballots.map(toBallotInfo),\n    createdTimestampSeconds: neuronInfo.created_timestamp_seconds,\n    state: neuronInfo.state,\n    joinedCommunityFundTimestampSeconds: neuronInfo\n      .joined_community_fund_timestamp_seconds.length\n      ? neuronInfo.joined_community_fund_timestamp_seconds[0]\n      : undefined,\n    retrievedAtTimestampSeconds: neuronInfo.retrieved_at_timestamp_seconds,\n    votingPower: neuronInfo.voting_power,\n    ageSeconds: neuronInfo.age_seconds,\n    fullNeuron: fullNeuron,\n  };\n};\n\nconst toNeuron = ({\n  neuron,\n  canisterId,\n}: {\n  neuron: RawNeuron;\n  canisterId: Principal;\n}): Neuron => ({\n  id: neuron.id.length ? toNeuronId(neuron.id[0]) : undefined,\n  stakedMaturityE8sEquivalent: fromNullable(\n    neuron.staked_maturity_e8s_equivalent,\n  ),\n  controller: neuron.controller.length\n    ? neuron.controller[0].toString()\n    : undefined,\n  recentBallots: neuron.recent_ballots.map(toBallotInfo),\n  kycVerified: neuron.kyc_verified,\n  notForProfit: neuron.not_for_profit,\n  cachedNeuronStake: neuron.cached_neuron_stake_e8s,\n  createdTimestampSeconds: neuron.created_timestamp_seconds,\n  autoStakeMaturity: fromNullable(neuron.auto_stake_maturity),\n  maturityE8sEquivalent: neuron.maturity_e8s_equivalent,\n  agingSinceTimestampSeconds: neuron.aging_since_timestamp_seconds,\n  neuronFees: neuron.neuron_fees_e8s,\n  hotKeys: neuron.hot_keys.map((p) => p.toString()),\n  accountIdentifier: principalToAccountIdentifier(canisterId, neuron.account),\n  joinedCommunityFundTimestampSeconds: neuron\n    .joined_community_fund_timestamp_seconds.length\n    ? neuron.joined_community_fund_timestamp_seconds[0]\n    : undefined,\n  dissolveState: neuron.dissolve_state.length\n    ? toDissolveState(neuron.dissolve_state[0])\n    : undefined,\n  spawnAtTimesSeconds: neuron.spawn_at_timestamp_seconds[0],\n  followees: neuron.followees.map(([topic, followees]) =>\n    toFollowees({ topic, followees }),\n  ),\n});\n\nconst toBallotInfo = ({ vote, proposal_id }: RawBallotInfo): BallotInfo => ({\n  vote,\n  proposalId: proposal_id.length ? toNeuronId(proposal_id[0]) : undefined,\n});\n\nconst toDissolveState = (dissolveState: RawDissolveState): DissolveState => {\n  if (\"DissolveDelaySeconds\" in dissolveState) {\n    return {\n      DissolveDelaySeconds: dissolveState.DissolveDelaySeconds,\n    };\n  } else {\n    return {\n      WhenDissolvedTimestampSeconds:\n        dissolveState.WhenDissolvedTimestampSeconds,\n    };\n  }\n};\n\nconst toFollowees = ({\n  topic,\n  followees,\n}: {\n  topic: number;\n  followees: RawFollowees;\n}): Followees => ({\n  topic,\n  followees: followees.followees.map(toNeuronId),\n});\n\nconst toNeuronId = ({ id }: RawNeuronId): NeuronId => id;\n\nconst toNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: RawNeuronIdOrSubaccount,\n): NeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: neuronIdOrSubaccount.NeuronId.id };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return {\n      Subaccount: uint8ArrayToArrayOfNumber(neuronIdOrSubaccount.Subaccount),\n    };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst toBallot = ({\n  neuronId,\n  ballot,\n}: {\n  neuronId: bigint;\n  ballot: RawBallot;\n}): Ballot => {\n  const { vote, voting_power: votingPower } = ballot;\n\n  return {\n    neuronId,\n    vote,\n    votingPower,\n  };\n};\n\nconst toProposal = ({\n  title,\n  url,\n  action,\n  summary,\n}: RawProposal): Proposal => ({\n  title: title.length ? title[0] : undefined,\n  url,\n  action: action.length ? toAction(action[0]) : undefined,\n  summary,\n});\n\nconst toAction = (action: RawAction): Action => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    return {\n      ExecuteNnsFunction: {\n        nnsFunctionId: executeNnsFunction.nns_function,\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: {\n        id: manageNeuron.id.length ? toNeuronId(manageNeuron.id[0]) : undefined,\n        command: manageNeuron.command.length\n          ? toCommand(manageNeuron.command[0])\n          : undefined,\n        neuronIdOrSubaccount: manageNeuron.neuron_id_or_subaccount.length\n          ? toNeuronIdOrSubaccount(manageNeuron.neuron_id_or_subaccount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveKyc.principals.map((p) => p.toString()),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuronMinimumStake: networkEconomics.neuron_minimum_stake_e8s,\n        maxProposalsToKeepPerTopic:\n          networkEconomics.max_proposals_to_keep_per_topic,\n        neuronManagementFeePerProposal:\n          networkEconomics.neuron_management_fee_per_proposal_e8s,\n        rejectCost: networkEconomics.reject_cost_e8s,\n        transactionFee: networkEconomics.transaction_fee_e8s,\n        neuronSpawnDissolveDelaySeconds:\n          networkEconomics.neuron_spawn_dissolve_delay_seconds,\n        minimumIcpXdrRate: networkEconomics.minimum_icp_xdr_rate,\n        maximumNodeProviderRewards:\n          networkEconomics.maximum_node_provider_rewards_e8s,\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        nodeProvider: rewardNodeProvider.node_provider.length\n          ? toNodeProvider(rewardNodeProvider.node_provider[0])\n          : undefined,\n        amountE8s: rewardNodeProvider.amount_e8s,\n        rewardMode: rewardNodeProvider.reward_mode.length\n          ? toRewardMode(rewardNodeProvider.reward_mode[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        useRegistryDerivedRewards: rewardNodeProviders\n          .use_registry_derived_rewards.length\n          ? rewardNodeProviders.use_registry_derived_rewards[0]\n          : undefined,\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          nodeProvider: r.node_provider.length\n            ? toNodeProvider(r.node_provider[0])\n            : undefined,\n          amountE8s: r.amount_e8s,\n          rewardMode: r.reward_mode.length\n            ? toRewardMode(r.reward_mode[0])\n            : undefined,\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change.length\n          ? toChange(addOrRemoveNodeProvider.change[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motionText: motion.motion_text,\n      },\n    };\n  }\n  if (\"SetDefaultFollowees\" in action) {\n    const setDefaultFollowees = action.SetDefaultFollowees;\n    return {\n      SetDefaultFollowees: {\n        defaultFollowees: setDefaultFollowees.default_followees.map(\n          ([topic, followees]) => toFollowees({ topic, followees }),\n        ),\n      },\n    };\n  }\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: toKnownNeuron(knownNeuron),\n    };\n  }\n\n  if (\"SetSnsTokenSwapOpenTimeWindow\" in action) {\n    const SetSnsTokenSwapOpenTimeWindow = action.SetSnsTokenSwapOpenTimeWindow;\n    const request = SetSnsTokenSwapOpenTimeWindow.request?.length\n      ? {\n          openTimeWindow: SetSnsTokenSwapOpenTimeWindow.request[0]\n            .open_time_window.length\n            ? {\n                startTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .start_timestamp_seconds,\n                endTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .end_timestamp_seconds,\n              }\n            : undefined,\n        }\n      : undefined;\n\n    const swapCanisterId = SetSnsTokenSwapOpenTimeWindow?.swap_canister_id\n      .length\n      ? SetSnsTokenSwapOpenTimeWindow.swap_canister_id[0].toString()\n      : undefined;\n\n    return {\n      SetSnsTokenSwapOpenTimeWindow: {\n        request,\n        swapCanisterId,\n      },\n    };\n  }\n\n  if (\"OpenSnsTokenSwap\" in action) {\n    const OpenSnsTokenSwap = action.OpenSnsTokenSwap;\n    const params: Params | undefined = fromNullable(OpenSnsTokenSwap.params);\n\n    return {\n      OpenSnsTokenSwap: {\n        communityFundInvestmentE8s: fromNullable(\n          OpenSnsTokenSwap.community_fund_investment_e8s,\n        ),\n        targetSwapCanisterId: fromNullable(\n          OpenSnsTokenSwap.target_swap_canister_id,\n        ),\n        ...(params !== undefined && {\n          params: {\n            minParticipantIcpE8s: params.min_participant_icp_e8s,\n            maxIcpE8s: params.max_icp_e8s,\n            swapDueTimestampSeconds: params.swap_due_timestamp_seconds,\n            minParticipants: params.min_participants,\n            snsTokenE8s: params.sns_token_e8s,\n            maxParticipantIcpE8s: params.max_participant_icp_e8s,\n            minIcpE8s: params.min_icp_e8s,\n            saleDelaySeconds: fromNullable(params.sale_delay_seconds),\n            neuronBasketConstructionParameters: fromNullable(\n              params.neuron_basket_construction_parameters,\n            ),\n          },\n        }),\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    const createServiceNervousSystem = action.CreateServiceNervousSystem;\n    return {\n      CreateServiceNervousSystem: {\n        url: fromNullable(createServiceNervousSystem.url),\n        governanceParameters: toGovernanceParameters(\n          fromNullable(createServiceNervousSystem.governance_parameters),\n        ),\n        fallbackControllerPrincipalIds:\n          createServiceNervousSystem.fallback_controller_principal_ids.map(\n            (principalId) => principalId.toString(),\n          ),\n        logo: toImage(fromNullable(createServiceNervousSystem.logo)),\n        name: fromNullable(createServiceNervousSystem.name),\n        ledgerParameters: toLedgerParameters(\n          fromNullable(createServiceNervousSystem.ledger_parameters),\n        ),\n        description: fromNullable(createServiceNervousSystem.description),\n        dappCanisters:\n          (createServiceNervousSystem.dapp_canisters.map(\n            toCanisterIdString,\n          ) as CanisterIdString[]) ?? [],\n        swapParameters: toSwapParameters(\n          fromNullable(createServiceNervousSystem.swap_parameters),\n        ),\n        initialTokenDistribution: toInitialTokenDistribution(\n          fromNullable(createServiceNervousSystem.initial_token_distribution),\n        ),\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(action);\n};\n\nconst toTally = (tally: RawTally): Tally => {\n  return {\n    no: tally.no,\n    yes: tally.yes,\n    total: tally.total,\n    timestampSeconds: tally.timestamp_seconds,\n  };\n};\n\nconst toCommand = (command: RawCommand): Command => {\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        newController: spawn.new_controller.length\n          ? spawn.new_controller[0].toString()\n          : undefined,\n        percentageToSpawn: spawn.percentage_to_spawn.length\n          ? spawn.percentage_to_spawn[0]\n          : 0,\n      },\n    };\n  }\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount: split.amount_e8s,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(toNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by.length\n          ? toClaimOrRefreshBy(claimOrRefresh.by[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation.length\n          ? toOperation(configure.operation[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal.length\n          ? toNeuronId(registerVote.proposal[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolveDelaySeconds: disburseToNeuron.dissolve_delay_seconds,\n        kycVerified: disburseToNeuron.kyc_verified,\n        amount: disburseToNeuron.amount_e8s,\n        newController: disburseToNeuron.new_controller.length\n          ? disburseToNeuron.new_controller[0].toString()\n          : undefined,\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentageToMerge: mergeMaturity.percentage_to_merge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentage_to_stake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentageToStake: fromNullable(percentage_to_stake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        title: makeProposal.title.length ? makeProposal.title[0] : undefined,\n        url: makeProposal.url,\n        action: makeProposal.action.length\n          ? toAction(makeProposal.action[0])\n          : undefined,\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        toAccountId: disburse.to_account.length\n          ? toAccountIdentifier(disburse.to_account[0])\n          : undefined,\n        amount: disburse.amount.length\n          ? toAmount(disburse.amount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        sourceNeuronId: merge.source_neuron_id.length\n          ? merge.source_neuron_id[0].id\n          : undefined,\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(command);\n};\n\nconst toOperation = (operation: RawOperation): Operation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hotKeyToRemove: removeHotKey.hot_key_to_remove.length\n          ? removeHotKey.hot_key_to_remove[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        newHotKey: addHotKey.new_hot_key.length\n          ? addHotKey.new_hot_key[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additionalDissolveDelaySeconds:\n          increaseDissolveDelay.additional_dissolve_delay_seconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolveTimestampSeconds:\n          setDissolveTimestamp.dissolve_timestamp_seconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const {\n      requested_setting_for_auto_stake_maturity:\n        requestedSettingForAutoStakeMaturity,\n    } = operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  throw new UnsupportedValueError(operation);\n};\n\nconst toChange = (change: RawChange): Change => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: toNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: toNodeProvider(change.ToAdd),\n    };\n  }\n  throw new UnsupportedValueError(change);\n};\n\nconst toNodeProvider = (nodeProvider: RawNodeProvider): NodeProvider => {\n  return {\n    id: nodeProvider.id.length ? nodeProvider.id[0].toString() : undefined,\n    rewardAccount: nodeProvider.reward_account.length\n      ? toAccountIdentifier(nodeProvider.reward_account[0])\n      : undefined,\n  };\n};\n\nconst toAmount = (amount: RawAmount): E8s => {\n  return amount.e8s;\n};\n\nconst toAccountIdentifier = (\n  accountIdentifier: RawAccountIdentifier,\n): AccountIdentifierString =>\n  accountIdentifierFromBytes(new Uint8Array(accountIdentifier.hash));\n\nconst toRewardMode = (rewardMode: RawRewardMode): RewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolveDelaySeconds: rewardMode.RewardToNeuron.dissolve_delay_seconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        toAccount:\n          rewardMode.RewardToAccount.to_account != undefined &&\n          rewardMode.RewardToAccount.to_account.length\n            ? toAccountIdentifier(rewardMode.RewardToAccount.to_account[0])\n            : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst toClaimOrRefreshBy = (by: RawBy): By => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller.length\n          ? by.MemoAndController.controller[0]\n          : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const toProposalInfo = (\n  proposalInfo: RawProposalInfo,\n): ProposalInfo => ({\n  id: proposalInfo.id.length ? toNeuronId(proposalInfo.id[0]) : undefined,\n  ballots: proposalInfo.ballots.map((b) =>\n    toBallot({ neuronId: b[0], ballot: b[1] }),\n  ),\n  rejectCost: proposalInfo.reject_cost_e8s,\n  proposalTimestampSeconds: proposalInfo.proposal_timestamp_seconds,\n  rewardEventRound: proposalInfo.reward_event_round,\n  failedTimestampSeconds: proposalInfo.failed_timestamp_seconds,\n  deadlineTimestampSeconds: fromNullable(\n    proposalInfo.deadline_timestamp_seconds,\n  ),\n  decidedTimestampSeconds: proposalInfo.decided_timestamp_seconds,\n  proposal: proposalInfo.proposal.length\n    ? toProposal(proposalInfo.proposal[0])\n    : undefined,\n  proposer: proposalInfo.proposer.length\n    ? toNeuronId(proposalInfo.proposer[0])\n    : undefined,\n  latestTally: proposalInfo.latest_tally.length\n    ? toTally(proposalInfo.latest_tally[0])\n    : undefined,\n  executedTimestampSeconds: proposalInfo.executed_timestamp_seconds,\n  topic: proposalInfo.topic,\n  status: proposalInfo.status,\n  rewardStatus: proposalInfo.reward_status,\n});\n\nexport const toArrayOfNeuronInfo = ({\n  response: { neuron_infos, full_neurons },\n  canisterId,\n}: {\n  response: RawListNeuronsResponse;\n  canisterId: Principal;\n}): Array<NeuronInfo> =>\n  neuron_infos.map(([id, neuronInfo]) =>\n    toNeuronInfo({\n      neuronId: id,\n      neuronInfo,\n      rawNeuron: full_neurons.find(\n        (neuron) => neuron.id.length && neuron.id[0].id === id,\n      ),\n      canisterId,\n    }),\n  );\n\nexport const toListProposalsResponse = ({\n  proposal_info,\n}: RawListProposalInfoResponse): ListProposalsResponse => ({\n  proposals: proposal_info.map(toProposalInfo),\n});\n\nexport const toKnownNeuron = ({\n  id,\n  known_neuron_data,\n}: RawKnownNeuron): KnownNeuron => {\n  return {\n    id: id[0]?.id ?? BigInt(0),\n    name: known_neuron_data[0]?.name ?? \"\",\n    description: known_neuron_data[0]?.description[0] ?? \"\",\n  };\n};\n\nconst convertPbBallot = (pbBallot: PbBallotInfo): BallotInfo => {\n  const pbProposalId = pbBallot.getProposalId();\n  return {\n    vote: pbBallot.getVote(),\n    proposalId:\n      pbProposalId !== undefined ? BigInt(pbProposalId.getId()) : undefined,\n  };\n};\n\nconst pbNeuronToNeuronState = (neuron?: PbNeuron): NeuronState => {\n  if (neuron?.hasWhenDissolvedTimestampSeconds()) {\n    return NeuronState.Dissolving;\n  }\n  if (neuron?.hasDissolveDelaySeconds()) {\n    const delay = neuron.getDissolveDelaySeconds();\n    if (delay === \"0\") {\n      return NeuronState.Dissolved;\n    }\n    return NeuronState.Locked;\n  }\n  return NeuronState.Unspecified;\n};\n\nconst convertPbFolloweesMapToFollowees = (\n  pbFolloweesMap: Map<number, PbNeuron.Followees>,\n): Followees[] => {\n  return pbFolloweesMap.toArray().map(([topicString, pbFollowees]) => {\n    return {\n      topic: Number(topicString),\n      followees:\n        pbFollowees\n          .getFolloweesList?.()\n          .map((neuronId) => BigInt(neuronId.getId())) ?? [],\n    };\n  });\n};\n\nconst convertPbPrincipalIdToPrincipalString = (\n  pbPrincipal: PrincipalId,\n): string =>\n  Principal.fromUint8Array(pbPrincipal.getSerializedId_asU8()).toText();\n\nconst convertNeuronSubaccountToAccountIdentifier = ({\n  neuron,\n  canisterId,\n}: {\n  neuron: PbNeuron;\n  canisterId: Principal;\n}): AccountIdentifier => {\n  // We assume fromBytes does not return an Error type.\n  const subAccount = SubAccount.fromBytes(\n    neuron.getAccount_asU8(),\n  ) as SubAccount;\n\n  return AccountIdentifier.fromPrincipal({\n    principal: canisterId,\n    subAccount: subAccount,\n  });\n};\n\nconst convertPbNeuronToFullNeuron = ({\n  pbNeuron,\n  pbNeuronInfo,\n  canisterId,\n}: {\n  pbNeuron: PbNeuron;\n  pbNeuronInfo: PbNeuronInfo;\n  canisterId: Principal;\n}): Neuron => {\n  const idObj = pbNeuron.getId();\n  const pbController = pbNeuron.getController();\n  const controller =\n    pbController === undefined\n      ? pbController\n      : convertPbPrincipalIdToPrincipalString(pbController);\n  let dissolveState = undefined;\n  if (pbNeuron.hasWhenDissolvedTimestampSeconds()) {\n    dissolveState = {\n      WhenDissolvedTimestampSeconds: BigInt(\n        pbNeuron.getWhenDissolvedTimestampSeconds(),\n      ),\n    };\n  } else if (pbNeuron.hasDissolveDelaySeconds()) {\n    dissolveState = {\n      DissolveDelaySeconds: BigInt(pbNeuron.getDissolveDelaySeconds()),\n    };\n  }\n  return {\n    id: idObj === undefined ? undefined : BigInt(idObj.getId()),\n    // TODO: Data not available in Neuron type\n    stakedMaturityE8sEquivalent: undefined,\n    controller,\n    recentBallots: pbNeuronInfo.getRecentBallotsList().map(convertPbBallot),\n    kycVerified: pbNeuron.getKycVerified(),\n    notForProfit: pbNeuron.getNotForProfit(),\n    cachedNeuronStake: BigInt(pbNeuron.getCachedNeuronStakeE8s()),\n    createdTimestampSeconds: BigInt(pbNeuron.getCreatedTimestampSeconds()),\n    // TODO: Data not available in Neuron type\n    autoStakeMaturity: undefined,\n    maturityE8sEquivalent: BigInt(pbNeuron.getMaturityE8sEquivalent()),\n    agingSinceTimestampSeconds: BigInt(\n      pbNeuron.getAgingSinceTimestampSeconds(),\n    ),\n    spawnAtTimesSeconds: pbNeuron.hasSpawnAtTimestampSeconds()\n      ? BigInt(pbNeuron.getSpawnAtTimestampSeconds())\n      : undefined,\n    neuronFees: BigInt(pbNeuron.getNeuronFeesE8s()),\n    hotKeys: pbNeuron\n      .getHotKeysList()\n      .map(convertPbPrincipalIdToPrincipalString),\n    accountIdentifier: convertNeuronSubaccountToAccountIdentifier({\n      neuron: pbNeuron,\n      canisterId,\n    }).toHex(),\n    // TODO: Data not available in Neuron type\n    joinedCommunityFundTimestampSeconds: undefined,\n    dissolveState,\n    followees: convertPbFolloweesMapToFollowees(pbNeuron.getFolloweesMap()),\n  };\n};\n\nexport const convertPbNeuronToNeuronInfo =\n  ({\n    pbNeurons,\n    canisterId,\n  }: {\n    pbNeurons: PbNeuron[];\n    canisterId: Principal;\n  }) =>\n  (pbNeuronMapEntry: ListNeuronsResponse.NeuronMapEntry): NeuronInfo => {\n    const pbNeuron = pbNeurons.find(\n      (pbNeuron) => pbNeuron.getId()?.getId() === pbNeuronMapEntry.getKey(),\n    );\n    const pbNeuronInfo = pbNeuronMapEntry.getValue();\n    if (pbNeuronInfo === undefined) {\n      throw new Error(\n        `NeuronInfo not present for neuron ${pbNeuronMapEntry.getKey()}`,\n      );\n    }\n    return {\n      neuronId: BigInt(pbNeuronMapEntry.getKey()),\n      dissolveDelaySeconds: BigInt(pbNeuronInfo.getDissolveDelaySeconds()),\n      recentBallots: pbNeuronInfo.getRecentBallotsList().map(convertPbBallot),\n      createdTimestampSeconds: BigInt(\n        pbNeuronInfo.getCreatedTimestampSeconds(),\n      ),\n      state: pbNeuronToNeuronState(pbNeuron),\n      // TODO: Data not available in Neuron type\n      joinedCommunityFundTimestampSeconds: undefined,\n      retrievedAtTimestampSeconds: BigInt(\n        pbNeuronInfo.getRetrievedAtTimestampSeconds(),\n      ),\n      votingPower: BigInt(pbNeuronInfo.getVotingPower()),\n      ageSeconds: BigInt(pbNeuronInfo.getAgeSeconds()),\n      fullNeuron:\n        pbNeuron === undefined\n          ? undefined\n          : convertPbNeuronToFullNeuron({ pbNeuron, pbNeuronInfo, canisterId }),\n    };\n  };\n\nconst toPercentage = (\n  percentage: RawPercentage | undefined,\n): Percentage | undefined => {\n  return percentage === undefined\n    ? undefined\n    : {\n        basisPoints: fromNullable(percentage.basis_points),\n      };\n};\n\nconst toDuration = (\n  duration: RawDuration | undefined,\n): Duration | undefined => {\n  return duration === undefined\n    ? undefined\n    : {\n        seconds: fromNullable(duration.seconds),\n      };\n};\n\nconst toGlobalTimeOfDay = (\n  time: RawGlobalTimeOfDay | undefined,\n): GlobalTimeOfDay | undefined => {\n  return time === undefined\n    ? undefined\n    : {\n        secondsAfterUtcMidnight: fromNullable(time.seconds_after_utc_midnight),\n      };\n};\n\nconst toCountries = (\n  countries: RawCountries | undefined,\n): Countries | undefined => {\n  return countries === undefined\n    ? undefined\n    : ({\n        isoCodes: countries.iso_codes,\n      } as Countries);\n};\n\nconst toTokens = (tokens: RawTokens | undefined): Tokens | undefined => {\n  return tokens === undefined\n    ? undefined\n    : {\n        e8s: fromNullable(tokens.e8s),\n      };\n};\n\nconst toCanisterIdString = (\n  canister: RawCanister | undefined,\n): CanisterIdString | undefined => {\n  return canister === undefined\n    ? undefined\n    : canister.id.length === 0\n    ? undefined\n    : fromDefinedNullable(canister.id).toString();\n};\n\nconst toImage = (image: RawImage | undefined): Image | undefined => {\n  return image === undefined\n    ? undefined\n    : {\n        base64Encoding: fromNullable(image.base64_encoding),\n      };\n};\n\nconst toLedgerParameters = (\n  ledgerParameters: RawLedgerParameters | undefined,\n): LedgerParameters | undefined => {\n  return ledgerParameters === undefined\n    ? undefined\n    : {\n        transactionFee: toTokens(\n          fromNullable(ledgerParameters.transaction_fee),\n        ),\n        tokenSymbol: fromNullable(ledgerParameters.token_symbol),\n        tokenLogo: toImage(fromNullable(ledgerParameters.token_logo)),\n        tokenName: fromNullable(ledgerParameters.token_name),\n      };\n};\n\nconst toVotingRewardParameters = (\n  votingRewardParameters: RawVotingRewardParameters | undefined,\n): VotingRewardParameters | undefined => {\n  return votingRewardParameters === undefined\n    ? undefined\n    : {\n        rewardRateTransitionDuration: toDuration(\n          fromNullable(votingRewardParameters.reward_rate_transition_duration),\n        ),\n        initialRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.initial_reward_rate),\n        ),\n        finalRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.final_reward_rate),\n        ),\n      };\n};\n\nconst toGovernanceParameters = (\n  governanceParameters: RawGovernanceParameters | undefined,\n): GovernanceParameters | undefined => {\n  return governanceParameters === undefined\n    ? undefined\n    : {\n        neuronMaximumDissolveDelayBonus: toPercentage(\n          fromNullable(\n            governanceParameters.neuron_maximum_dissolve_delay_bonus,\n          ),\n        ),\n        neuronMaximumAgeForAgeBonus: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_age_for_age_bonus),\n        ),\n        neuronMaximumDissolveDelay: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_dissolve_delay),\n        ),\n        neuronMinimumDissolveDelayToVote: toDuration(\n          fromNullable(\n            governanceParameters.neuron_minimum_dissolve_delay_to_vote,\n          ),\n        ),\n        neuronMaximumAgeBonus: toPercentage(\n          fromNullable(governanceParameters.neuron_maximum_age_bonus),\n        ),\n        neuronMinimumStake: toTokens(\n          fromNullable(governanceParameters.neuron_minimum_stake),\n        ),\n        proposalWaitForQuietDeadlineIncrease: toDuration(\n          fromNullable(\n            governanceParameters.proposal_wait_for_quiet_deadline_increase,\n          ),\n        ),\n        proposalInitialVotingPeriod: toDuration(\n          fromNullable(governanceParameters.proposal_initial_voting_period),\n        ),\n        proposalRejectionFee: toTokens(\n          fromNullable(governanceParameters.proposal_rejection_fee),\n        ),\n        votingRewardParameters: toVotingRewardParameters(\n          fromNullable(governanceParameters.voting_reward_parameters),\n        ),\n      };\n};\n\nconst toNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters:\n    | RawNeuronBasketConstructionParameters\n    | undefined,\n): NeuronBasketConstructionParameters | undefined => {\n  return neuronBasketConstructionParameters === undefined\n    ? undefined\n    : {\n        dissolveDelayInterval: toDuration(\n          fromNullable(\n            neuronBasketConstructionParameters.dissolve_delay_interval,\n          ),\n        ),\n        count: fromNullable(neuronBasketConstructionParameters.count),\n      };\n};\n\nconst toSwapParameters = (\n  swapParameters: RawSwapParameters | undefined,\n): SwapParameters | undefined => {\n  return swapParameters === undefined\n    ? undefined\n    : {\n        minimumParticipants: fromNullable(swapParameters.minimum_participants),\n        duration: toDuration(fromNullable(swapParameters.duration)),\n        neuronBasketConstructionParameters:\n          toNeuronBasketConstructionParameters(\n            fromNullable(swapParameters.neuron_basket_construction_parameters),\n          ),\n        confirmationText: fromNullable(swapParameters.confirmation_text),\n        maximumParticipantIcp: toTokens(\n          fromNullable(swapParameters.maximum_participant_icp),\n        ),\n        neuronsFundInvestmentIcp: toTokens(\n          fromNullable(swapParameters.neurons_fund_investment_icp),\n        ),\n        minimumIcp: toTokens(fromNullable(swapParameters.minimum_icp)),\n        minimumParticipantIcp: toTokens(\n          fromNullable(swapParameters.minimum_participant_icp),\n        ),\n        startTime: toGlobalTimeOfDay(fromNullable(swapParameters.start_time)),\n        maximumIcp: toTokens(fromNullable(swapParameters.maximum_icp)),\n        restrictedCountries: toCountries(\n          fromNullable(swapParameters.restricted_countries),\n        ),\n      };\n};\n\nconst toSwapDistribution = (\n  swapDistribution: RawSwapDistribution | undefined,\n): SwapDistribution | undefined => {\n  return swapDistribution === undefined\n    ? undefined\n    : {\n        total: toTokens(fromNullable(swapDistribution.total)),\n      };\n};\n\nconst toNeuronDistribution = (\n  neuronDistribution: RawNeuronDistribution | undefined,\n): NeuronDistribution | undefined => {\n  return neuronDistribution === undefined\n    ? undefined\n    : {\n        controller:\n          neuronDistribution.controller.length === 0\n            ? undefined\n            : neuronDistribution.controller[0].toString(),\n        dissolveDelay: toDuration(\n          fromNullable(neuronDistribution.dissolve_delay),\n        ),\n        memo: fromNullable(neuronDistribution.memo),\n        vestingPeriod: toDuration(\n          fromNullable(neuronDistribution.vesting_period),\n        ),\n        stake: toTokens(fromNullable(neuronDistribution.stake)),\n      };\n};\n\nconst toDeveloperDistribution = (\n  developerDistribution: RawDeveloperDistribution | undefined,\n): DeveloperDistribution | undefined => {\n  return developerDistribution === undefined\n    ? undefined\n    : {\n        developerNeurons: developerDistribution.developer_neurons.map(\n          toNeuronDistribution,\n        ) as Array<NeuronDistribution>,\n      };\n};\n\nconst toInitialTokenDistribution = (\n  initialTokenDistribution: RawInitialTokenDistribution | undefined,\n): InitialTokenDistribution | undefined => {\n  return initialTokenDistribution === undefined\n    ? undefined\n    : {\n        treasuryDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.treasury_distribution),\n        ),\n        developerDistribution: toDeveloperDistribution(\n          fromNullable(initialTokenDistribution.developer_distribution),\n        ),\n        swapDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.swap_distribution),\n        ),\n      };\n};\n", "// The Candid files are generated from Proto. That's why the enums are currently lost in the conversion process.\n// These enums are used to map back numbers provided by the backend through the Candid declaration.\n// We use Pascal case for consistency reason.\n//\n// Proto source: https://github.com/dfinity/ic/blob/master/rs/nns/governance/proto/icNns_governance/pb/v1/governance.proto\n\nexport enum NeuronState {\n  Unspecified = 0,\n  Locked = 1,\n  Dissolving = 2,\n  Dissolved = 3,\n  Spawning = 4,\n}\n\nexport enum Topic {\n  Unspecified = 0,\n  ManageNeuron = 1,\n  ExchangeRate = 2,\n  NetworkEconomics = 3,\n  Governance = 4,\n  NodeAdmin = 5,\n  ParticipantManagement = 6,\n  SubnetManagement = 7,\n  NetworkCanisterManagement = 8,\n  Kyc = 9,\n  NodeProviderRewards = 10,\n  /**\n   * @deprecated\n   */\n  SnsDecentralizationSale = 11,\n  SubnetReplicaVersionManagement = 12,\n  ReplicaVersionManagement = 13,\n  SnsAndCommunityFund = 14,\n}\n\n// The proposal status, with respect to reward distribution.\n// See also ProposalStatus.\nexport enum ProposalRewardStatus {\n  Unknown = 0,\n\n  // The proposal still accept votes, for the purpose of\n  // vote rewards. This implies nothing on the ProposalStatus.\n  AcceptVotes = 1,\n\n  // The proposal no longer accepts votes. It is due to settle\n  // at the next reward event.\n  ReadyToSettle = 2,\n\n  // The proposal has been taken into account in a reward event.\n  Settled = 3,\n\n  // The proposal is not eligible to be taken into account in a reward event.\n  Ineligible = 4,\n}\n\n// The proposal status, with respect to decision making and execution.\n// See also ProposalRewardStatus.\nexport enum ProposalStatus {\n  Unknown = 0,\n\n  // A decision (accept/reject) has yet to be made.\n  Open = 1,\n\n  // The proposal has been rejected.\n  Rejected = 2,\n\n  // The proposal has been accepted. At this time, either execution\n  // as not yet started, or it has but the outcome is not yet known.\n  Accepted = 3,\n\n  // The proposal was accepted and successfully executed.\n  Executed = 4,\n\n  // The proposal was accepted, but execution failed.\n  Failed = 5,\n}\n\nexport enum Vote {\n  Unspecified = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum NnsFunction {\n  Unspecified = 0,\n  CreateSubnet = 1,\n  AddNodeToSubnet = 2,\n  NnsCanisterInstall = 3,\n  NnsCanisterUpgrade = 4,\n  BlessReplicaVersion = 5,\n  RecoverSubnet = 6,\n  UpdateConfigOfSubnet = 7,\n  AssignNoid = 8,\n  NnsRootUpgrade = 9,\n  IcpXdrConversionRate = 10,\n  UpdateSubnetReplicaVersion = 11,\n  ClearProvisionalWhitelist = 12,\n  RemoveNodesFromSubnet = 13,\n  SetAuthorizedSubnetworks = 14,\n  SetFirewallConfig = 15,\n  UpdateNodeOperatorConfig = 16,\n  StopOrStartNnsCanister = 17,\n  RemoveNodes = 18,\n  UninstallCode = 19,\n  UpdateNodeRewardsTable = 20,\n  AddOrRemoveDataCenters = 21,\n  UpdateUnassignedNodesConfig = 22,\n  RemoveNodeOperators = 23,\n  RerouteCanisterRanges = 24,\n  AddFirewallRules = 25,\n  RemoveFirewallRules = 26,\n  UpdateFirewallRules = 27,\n  PrepareCanisterMigration = 28,\n  CompleteCanisterMigration = 29,\n  AddSnsWasm = 30,\n  ChangeSubnetMembership = 31,\n  UpdateSubnetType = 32,\n  ChangeSubnetTypeAssignment = 33,\n  UpdateSnsWasmSnsSubnetIds = 34,\n  UpdateAllowedPrincipals = 35,\n  RetireReplicaVersion = 36,\n  InsertSnsWasmUpgradePathEntries = 37,\n  UpdateElectedReplicaVersions = 38,\n  BitcoinSetConfig = 39,\n}\n", "import { GovernanceError } from \"../../errors/governance.errors\";\nimport { importNnsProto } from \"../../utils/proto.utils\";\n\nexport const checkPbManageNeuronResponse = async (rawResponse: Uint8Array) => {\n  const { ManageNeuronResponse: ManageNeuronResponseConstructor } =\n    await importNnsProto();\n\n  const response =\n    ManageNeuronResponseConstructor.deserializeBinary(rawResponse);\n  const err = response.getError();\n  if (err) {\n    throw new GovernanceError({\n      error_message: err.getErrorMessage(),\n      error_type: err.getErrorType(),\n    });\n  }\n};\n", "import type {\n  Command_1,\n  ManageNeuron,\n  ManageNeuronResponse,\n  _SERVICE as GovernanceService,\n} from \"../../../candid/governance\";\nimport { GovernanceError } from \"../../errors/governance.errors\";\n\n/**\n * Checks a Manage Neuron Response for error and returns successful response data.\n *\n * @throws {@link GovernanceError}\n */\nexport const getSuccessfulCommandFromResponse = (\n  response: ManageNeuronResponse,\n): Command_1 => {\n  const { command } = response;\n  const data = command[0];\n  if (!data) {\n    throw new GovernanceError({\n      error_message: \"Error updating neuron\",\n      error_type: 0,\n    });\n  }\n\n  if (\"Error\" in data) {\n    throw new GovernanceError(data.Error);\n  }\n  return data;\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const manageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuron;\n  service: GovernanceService;\n}): Promise<void> => {\n  const response = await service.manage_neuron(request);\n  // We use it only to assert that there are no errors\n  getSuccessfulCommandFromResponse(response);\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const simulateManageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuron;\n  service: GovernanceService;\n}): Promise<Command_1> => {\n  const response = await service.simulate_manage_neuron(request);\n  return getSuccessfulCommandFromResponse(response);\n};\n", "import { bigEndianCrc32 } from \"@dfinity/utils\";\nimport { InvalidAccountIDError } from \"../errors/governance.errors\";\n\n/**\n * Checks account id check sum\n *\n * @throws InvalidAccountIDError\n */\nexport const checkAccountId = (accountId: string): void => {\n  // Verify the checksum of the given address.\n  if (accountId.length != 64) {\n    throw new InvalidAccountIDError(\n      `Invalid account identifier ${accountId}. The account identifier must be 64 chars in length.`,\n    );\n  }\n\n  const toAccountBytes = Buffer.from(accountId, \"hex\");\n  const foundChecksum = toAccountBytes.slice(0, 4);\n  const expectedCheckum = Buffer.from(bigEndianCrc32(toAccountBytes.slice(4)));\n  if (!expectedCheckum.equals(foundChecksum)) {\n    throw new InvalidAccountIDError(\n      `Account identifier ${accountId} has an invalid checksum. Are you sure the account identifier is correct?\\n\\nExpected checksum: ${expectedCheckum.toString(\n        \"hex\",\n      )}\\nFound checksum: ${foundChecksum.toString(\"hex\")}`,\n    );\n  }\n};\n", "import type { ICPTs } from \"@dfinity/nns-proto\";\nimport {\n  convertStringToE8s,\n  ICPToken,\n  type FromStringToTokenError,\n  type Token,\n} from \"@dfinity/utils\";\nimport { importNnsProto } from \"./utils/proto.utils\";\n\n/**\n * We don't extend to keep `fromE8s` and `fromString` as backwards compatible.\n * @deprecated\n */\nexport class ICP {\n  private constructor(\n    private e8s: bigint,\n    public token: Token,\n  ) {}\n\n  public static fromE8s(amount: bigint): ICP {\n    return new ICP(amount, ICPToken);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   */\n  public static fromString(amount: string): ICP | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n    if (typeof e8s === \"bigint\") {\n      return new ICP(e8s, ICPToken);\n    }\n    return e8s;\n  }\n\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n\n  public async toProto(): Promise<ICPTs> {\n    const { ICPTs: ICPTsConstructor } = await importNnsProto();\n\n    const proto = new ICPTsConstructor();\n    proto.setE8s(this.e8s.toString());\n    return proto;\n  }\n}\n", "import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\nimport { createServices } from \"@dfinity/utils\";\nimport type { _SERVICE as LedgerService } from \"../candid/ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory } from \"../candid/ledger.idl\";\nimport type { AccountIdentifier } from \"./account_identifier\";\nimport {\n  subAccountNumbersToSubaccount,\n  toICPTs,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport { TRANSACTION_FEE } from \"./constants/constants\";\nimport {\n  mapTransferError,\n  mapTransferProtoError,\n} from \"./errors/ledger.errors\";\nimport type { BlockHeight } from \"./types/common\";\nimport type {\n  LedgerCanisterCall,\n  LedgerCanisterOptions,\n} from \"./types/ledger.options\";\nimport type { TransferRequest } from \"./types/ledger_converters\";\nimport { importNnsProto, queryCall, updateCall } from \"./utils/proto.utils\";\n\nexport class LedgerCanister {\n  private constructor(\n    private readonly agent: Agent,\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<LedgerService>,\n    private readonly certifiedService: ActorSubclass<LedgerService>,\n    private readonly updateFetcher: LedgerCanisterCall,\n    private readonly queryFetcher: LedgerCanisterCall,\n    private readonly hardwareWallet: boolean = false,\n  ) {}\n\n  public static create(options: LedgerCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const { service, certifiedService, agent } = createServices<LedgerService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new LedgerCanister(\n      agent,\n      canisterId,\n      service,\n      certifiedService,\n      options.updateCallOverride ?? updateCall,\n      options.queryCallOverride ?? queryCall,\n      options.hardwareWallet,\n    );\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<bigint> => {\n    if (this.hardwareWallet) {\n      return this.accountBalanceHardwareWallet({\n        accountIdentifier,\n        certified,\n      });\n    }\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toUint8Array(),\n    });\n    return tokens.e8s;\n  };\n\n  /**\n   * Returns the transaction fee of the ledger canister\n   * @returns {BigInt}\n   */\n  public transactionFee = async () => {\n    const {\n      transfer_fee: { e8s },\n    } = await this.service.transfer_fee({});\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    if (this.hardwareWallet) {\n      return this.transferHardwareWallet(request);\n    }\n    // When candid is implemented, the previous lines will go away.\n    // But the transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  private accountBalanceHardwareWallet = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<bigint> => {\n    const callMethod = certified ? this.updateFetcher : this.queryFetcher;\n\n    const { AccountBalanceRequest: AccountBalanceRequestConstructor, ICPTs } =\n      await importNnsProto();\n\n    const request = new AccountBalanceRequestConstructor();\n    request.setAccount(await accountIdentifier.toProto());\n\n    const responseBytes = await callMethod({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"account_balance_pb\",\n      arg: request.serializeBinary(),\n    });\n\n    return BigInt(\n      ICPTs.deserializeBinary(new Uint8Array(responseBytes)).getE8s(),\n    );\n  };\n\n  private transferHardwareWallet = async ({\n    to,\n    amount,\n    memo,\n    fee,\n    fromSubAccount,\n    createdAt,\n  }: TransferRequest): Promise<BlockHeight> => {\n    const { SendRequest, Payment, Memo, TimeStamp, BlockHeight } =\n      await importNnsProto();\n\n    const request = new SendRequest();\n    request.setTo(await to.toProto());\n\n    const payment = new Payment();\n    payment.setReceiverGets(await toICPTs(amount));\n    request.setPayment(payment);\n\n    request.setMaxFee(await toICPTs(fee ?? TRANSACTION_FEE));\n\n    // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n    const requestMemo = new Memo();\n    requestMemo.setMemo((memo ?? BigInt(0)).toString());\n    request.setMemo(requestMemo);\n\n    if (createdAt !== undefined) {\n      const timestamp = new TimeStamp();\n      timestamp.setTimestampNanos(createdAt.toString());\n      request.setCreatedAtTime(timestamp);\n    }\n\n    if (fromSubAccount !== undefined) {\n      request.setFromSubaccount(\n        await subAccountNumbersToSubaccount(fromSubAccount),\n      );\n    }\n\n    try {\n      const responseBytes = await this.updateFetcher({\n        agent: this.agent,\n        canisterId: this.canisterId,\n        methodName: \"send_pb\",\n        arg: request.serializeBinary(),\n      });\n\n      // Successful tx. Return the block height.\n      return BigInt(BlockHeight.deserializeBinary(responseBytes).getHeight());\n    } catch (err) {\n      if (err instanceof Error) {\n        throw mapTransferProtoError(err);\n      }\n\n      throw err;\n    }\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({ 'from' : AccountIdentifier, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat64,\n      })\n    ),\n  });\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    '_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'account_balance_dfx' : IDL.Func([AccountBalanceArgsDfx], [Tokens], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_metadata' : IDL.Func([], [IDL.Vec(IDL.Tuple(IDL.Text, Value))], []),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const AccountBalanceArgsDfx = IDL.Record({\n    'account' : TextAccountIdentifier,\n  });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const Icrc1Tokens = IDL.Nat;\n  const Value = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Icrc1Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Icrc1Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Icrc1Timestamp),\n    'amount' : Icrc1Tokens,\n  });\n  const Icrc1BlockIndex = IDL.Nat;\n  const Icrc1TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Icrc1Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : Icrc1BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Icrc1Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Icrc1Tokens }),\n  });\n  const Icrc1TransferResult = IDL.Variant({\n    'Ok' : Icrc1BlockIndex,\n    'Err' : Icrc1TransferError,\n  });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Approve' : IDL.Record({\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'allowance_e8s' : IDL.Int,\n      'expires_at' : IDL.Opt(TimeStamp),\n      'spender' : AccountIdentifier,\n    }),\n    'Burn' : IDL.Record({ 'from' : AccountIdentifier, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n    'TransferFrom' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n      'spender' : AccountIdentifier,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'icrc1_memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat64,\n      })\n    ),\n  });\n  const SendArgs = IDL.Record({\n    'to' : TextAccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'account_balance_dfx' : IDL.Func(\n        [AccountBalanceArgsDfx],\n        [Tokens],\n        ['query'],\n      ),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Icrc1Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, Value))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Icrc1Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [Icrc1TransferResult], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'send_dfx' : IDL.Func([SendArgs], [BlockIndex], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(SubAccount),\n  });\n  const UpgradeArgs = IDL.Record({\n    'maximum_number_of_accounts' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n  });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const TextAccountIdentifier = IDL.Text;\n  const Duration = IDL.Record({ 'secs' : IDL.Nat64, 'nanos' : IDL.Nat32 });\n  const ArchiveOptions = IDL.Record({\n    'num_blocks_to_archive' : IDL.Nat64,\n    'trigger_threshold' : IDL.Nat64,\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n    'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n    'controller_id' : IDL.Principal,\n  });\n  const InitArgs = IDL.Record({\n    'send_whitelist' : IDL.Vec(IDL.Principal),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(Tokens),\n    'minting_account' : TextAccountIdentifier,\n    'transaction_window' : IDL.Opt(Duration),\n    'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n    'icrc1_minting_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Opt(ArchiveOptions),\n    'initial_values' : IDL.Vec(IDL.Tuple(TextAccountIdentifier, Tokens)),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const LedgerCanisterPayload = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerCanisterPayload];\n};\n", "import type { ICPTs, Subaccount } from \"@dfinity/nns-proto\";\nimport { arrayOfNumberToUint8Array } from \"@dfinity/utils\";\nimport type {\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledger\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport type { TransferRequest } from \"../../types/ledger_converters\";\nimport { importNnsProto } from \"../../utils/proto.utils\";\n\nexport const subAccountNumbersToSubaccount = async (\n  subAccountNumbers: number[],\n): Promise<Subaccount> => {\n  const bytes = new Uint8Array(subAccountNumbers).buffer;\n  const { Subaccount: SubaccountConstructor } = await importNnsProto();\n  const subaccount: Subaccount = new SubaccountConstructor();\n  subaccount.setSubAccount(new Uint8Array(bytes));\n  return subaccount;\n};\n\nexport const toICPTs = async (amount: bigint): Promise<ICPTs> => {\n  const { ICPTs: ICPTsConstructor } = await importNnsProto();\n  const result = new ICPTsConstructor();\n  result.setE8s(amount.toString(10));\n  return result;\n};\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n  createdAt,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toUint8Array(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time:\n    createdAt !== undefined ? [{ timestamp_nanos: createdAt }] : [],\n  from_subaccount:\n    fromSubAccount === undefined\n      ? []\n      : [arrayOfNumberToUint8Array(fromSubAccount)],\n});\n", "import { convertStringToE8s } from \"@dfinity/utils\";\nimport type { TransferError as RawTransferError } from \"../../candid/ledger\";\nimport type { BlockHeight } from \"../types/common\";\n\nexport class TransferError extends Error {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: bigint) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs: number) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends TransferError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError,\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    return new InsufficientFundsError(\n      rawTransferError.InsufficientFunds.balance.e8s,\n    );\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos),\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`,\n  );\n};\n\nexport const mapTransferProtoError = (responseBytes: Error): TransferError => {\n  const { message } = responseBytes;\n\n  if (message.includes(\"Reject code: 5\")) {\n    // Match against the different error types.\n    // This string matching is fragile. It's a stop-gap solution until\n    // we migrate to the candid interface.\n\n    if (message.match(/Sending from (.*) is not allowed/)) {\n      return new InvalidSenderError();\n    }\n\n    {\n      const m = message.match(/transaction.*duplicate.* in block (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxDuplicateError(BigInt(m[1]));\n      }\n    }\n\n    {\n      const m = message.match(\n        /debit account.*, current balance: (\\d*(\\.\\d*)?)/,\n      );\n      if (m && m.length > 1) {\n        const balance = convertStringToE8s(m[1]);\n        if (typeof balance === \"bigint\") {\n          return new InsufficientFundsError(balance);\n        }\n      }\n    }\n\n    if (message.includes(\"is in future\")) {\n      return new TxCreatedInFutureError();\n    }\n\n    {\n      const m = message.match(/older than (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxTooOldError(Number.parseInt(m[1]));\n      }\n    }\n  }\n\n  // Unknown error. Throw as-is.\n  throw responseBytes;\n};\n", "import { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type {\n  DeployedSns,\n  _SERVICE as SnsWasmService,\n} from \"../candid/sns_wasm\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/sns_wasm.certified.idl\";\nimport { idlFactory } from \"../candid/sns_wasm.idl\";\nimport { MAINNET_SNS_WASM_CANISTER_ID } from \"./constants/canister_ids\";\n\nexport class SnsWasmCanister {\n  private constructor(\n    private readonly service: SnsWasmService,\n    private readonly certifiedService: SnsWasmService,\n  ) {}\n\n  public static create(options: CanisterOptions<SnsWasmService> = {}) {\n    const { service, certifiedService } = createServices<SnsWasmService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_SNS_WASM_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new SnsWasmCanister(service, certifiedService);\n  }\n\n  public listSnses = async ({\n    certified = true,\n  }: {\n    certified?: boolean;\n  }): Promise<DeployedSns[]> => {\n    const service = certified ? this.certifiedService : this.service;\n\n    const { instances } = await service.list_deployed_snses({});\n    return instances;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const NeuronsFundParticipants = IDL.Record({\n    'participants' : IDL.Vec(CfParticipant),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participants' : IDL.Opt(NeuronsFundParticipants),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        [],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        [],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        [],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        [],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], []),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        [],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        [],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const CfNeuron = IDL.Record({\n    'nns_neuron_id' : IDL.Nat64,\n    'amount_icp_e8s' : IDL.Nat64,\n  });\n  const CfParticipant = IDL.Record({\n    'hotkey_principal' : IDL.Text,\n    'cf_neurons' : IDL.Vec(CfNeuron),\n  });\n  const NeuronsFundParticipants = IDL.Record({\n    'participants' : IDL.Vec(CfParticipant),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participants' : IDL.Opt(NeuronsFundParticipants),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        ['query'],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        ['query'],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        ['query'],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        ['query'],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], ['query']),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        ['query'],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        ['query'],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n", "import type { Vote } from \"../enums/governance.enums\";\nimport type {\n  Ballot,\n  BallotInfo,\n  NeuronInfo,\n  ProposalId,\n  ProposalInfo,\n} from \"../types/governance_converters\";\n\nconst voteForProposal = ({\n  recentBallots,\n  proposalId,\n}: {\n  recentBallots: BallotInfo[];\n  proposalId: ProposalId | undefined;\n}): Vote | undefined => {\n  if (!proposalId) {\n    return undefined;\n  }\n\n  const ballot: BallotInfo | undefined = recentBallots.find(\n    ({ proposalId: id }: BallotInfo) => id === proposalId,\n  );\n  return ballot?.vote;\n};\n\n/**\n * Filter the neurons that are ineligible to vote to a proposal.\n *\n * This feature needs the ballots of the proposal to contains accurate data.\n * If the proposal has settled, as the ballots of the proposal are emptied for archive purpose, the function might return a list of ineligible neurons that are actually neurons that have not voted but would have been eligible.\n *\n * Long story short, check the status of the proposal before using this function.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const ineligibleNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { ballots, proposalTimestampSeconds } = proposal;\n\n  return neurons.filter(({ createdTimestampSeconds, neuronId }: NeuronInfo) => {\n    const createdSinceProposal: boolean =\n      createdTimestampSeconds > proposalTimestampSeconds;\n\n    const dissolveTooShort: boolean =\n      ballots.find(\n        ({ neuronId: ballotNeuronId }: Ballot) => ballotNeuronId === neuronId,\n      ) === undefined;\n\n    return createdSinceProposal || dissolveTooShort;\n  });\n};\n\n/**\n * Filter the neurons that can vote for a proposal - i.e. the neurons that have not voted yet and are eligible\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const votableNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { id: proposalId } = proposal;\n\n  return neurons.filter(\n    ({ recentBallots, neuronId }: NeuronInfo) =>\n      voteForProposal({ recentBallots, proposalId }) === undefined &&\n      ineligibleNeurons({ neurons, proposal }).find(\n        ({ neuronId: ineligibleNeuronId }: NeuronInfo) =>\n          ineligibleNeuronId === neuronId,\n      ) === undefined,\n  );\n};\n\n/**\n * Filter the neurons that have voted for a proposal.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal for which some neurons might have already voted.\n */\nexport const votedNeurons = ({\n  neurons,\n  proposal: { id: proposalId },\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] =>\n  neurons.filter(\n    ({ recentBallots }: NeuronInfo) =>\n      voteForProposal({ recentBallots, proposalId }) !== undefined,\n  );\n"],
  "mappings": "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",
  "names": ["GOVERNANCE_CANISTER_ID", "Principal", "MAINNET_GOVERNANCE_CANISTER_ID", "MAINNET_LEDGER_CANISTER_ID", "MAINNET_GENESIS_TOKEN_CANISTER_ID", "MAINNET_SNS_WASM_CANISTER_ID", "FromStringToTokenError", "E8S_PER_TOKEN", "convertStringToE8s", "value", "amount", "regexMatch", "integral", "fractional", "e8s", "ICPToken", "defaultAgent", "HttpAgent", "AnonymousIdentity", "createServices", "canisterId", "serviceOverride", "certifiedServiceOverride", "agentOption", "callTransform", "queryTransform", "idlFactory", "certifiedIdlFactory", "agent", "defaultAgent", "service", "Actor", "certifiedService", "InvalidPercentageError", "NullishError", "assertNonNullish", "value", "message", "assertPercentageNumber", "percentage", "uint8ArrayToBigInt", "array", "view", "high", "low", "arrayBufferToUint8Array", "buffer", "uint8ArrayToArrayOfNumber", "array", "arrayOfNumberToUint8Array", "numbers", "asciiStringToByteArray", "text", "c", "uint8ArrayToHexString", "bytes", "str", "byte", "ALPHABET", "LOOKUP_TABLE", "i", "lookUpTable", "crc32", "bytes", "crc", "i", "t", "bigEndianCrc32", "checksumArrayBuf", "isNullish", "argument", "nonNullish", "toNullable", "value", "nonNullish", "fromNullable", "fromDefinedNullable", "result", "assertNonNullish", "idlFactory", "IDL", "NeuronId", "Result", "Result_1", "TransferredNeuron", "AccountState", "Result_2", "GenesisTokenCanister", "service", "hexPubKey", "response", "neuronId", "options", "createServices", "MAINNET_GENESIS_TOKEN_CANISTER_ID", "importNnsProto", "updateCall", "agent", "canisterId", "methodName", "arg", "submitResponse", "blob", "polling", "queryCall", "queryResponse", "h", "k", "l", "b", "c", "m", "f", "d", "o", "p", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "min", "u8a", "a", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "tmp", "setBigUint64", "view", "byteOffset", "value", "_32n", "_u32_max", "wh", "wl", "h", "l", "SHA2", "blockLen", "outputLen", "padOffset", "buffer", "len", "pos", "take", "dataView", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "Chi", "c", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "A", "B", "C", "D", "E", "F", "G", "H", "offset", "W15", "W2", "s0", "s1", "sigma1", "T1", "T2", "SHA224", "sha256", "sha224", "AccountIdentifier", "hex", "principal", "subAccount", "SubAccount", "padding", "asciiStringToByteArray", "shaObj", "arrayOfNumberToUint8Array", "hash", "checksum", "bigEndianCrc32", "AccountIdentifierConstructor", "importNnsProto", "accountIdentifier", "uint8ArrayToHexString", "_SubAccount", "principalBytes", "id", "__publicField", "CREATE_CANISTER_MEMO", "TOP_UP_CANISTER_MEMO", "TRANSACTION_FEE", "E8S_PER_TOKEN", "require_base64_js", "__commonJSMin", "exports", "byteLength", "toByteArray", "fromByteArray", "lookup", "revLookup", "Arr", "code", "i", "len", "getLens", "b64", "validLen", "placeHoldersLen", "lens", "_byteLength", "tmp", "arr", "curByte", "tripletToBase64", "num", "encodeChunk", "uint8", "start", "end", "output", "extraBytes", "parts", "maxChunkLength", "len2", "require_ieee754", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "d", "s", "value", "c", "rt", "require_buffer", "base64", "ieee754", "customInspectSymbol", "Buffer", "SlowBuffer", "K_MAX_LENGTH", "typedArraySupport", "proto", "createBuffer", "length", "buf", "arg", "encodingOrOffset", "allocUnsafe", "from", "fromString", "fromArrayView", "isInstance", "fromArrayBuffer", "valueOf", "b", "fromObject", "assertSize", "size", "alloc", "fill", "encoding", "checked", "string", "actual", "fromArrayLike", "array", "arrayView", "copy", "byteOffset", "obj", "numberIsNaN", "a", "x", "y", "list", "pos", "mustMatch", "loweredCase", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "n", "str", "max", "target", "thisStart", "thisEnd", "thisCopy", "targetCopy", "bidirectionalIndexOf", "val", "dir", "arrayIndexOf", "indexSize", "arrLength", "valLength", "read", "foundIndex", "found", "j", "hexWrite", "remaining", "strLen", "parsed", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "base64Write", "ucs2Write", "utf16leToBytes", "res", "firstByte", "codePoint", "bytesPerSequence", "secondByte", "thirdByte", "fourthByte", "tempCodePoint", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "codePoints", "ret", "out", "hexSliceLookupTable", "bytes", "newBuf", "checkOffset", "ext", "noAssert", "mul", "checkInt", "min", "maxBytes", "limit", "sub", "checkIEEE754", "writeFloat", "littleEndian", "writeDouble", "targetStart", "INVALID_BASE64_RE", "base64clean", "units", "leadSurrogate", "byteArray", "hi", "lo", "src", "dst", "type", "alphabet", "table", "i16", "require_safe_buffer", "module", "copyProps", "key", "SafeBuffer", "require_browser", "MAX_BYTES", "MAX_UINT32", "oldBrowser", "crypto", "randomBytes", "cb", "generated", "import_randombytes", "o", "idlFactory", "IDL", "Proposal", "NeuronId", "Followees", "AccountIdentifier", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "MostRecentMonthlyNodeProviderRewards", "GovernanceCachedMetrics", "NetworkEconomics", "RewardEvent", "NeuronStakeTransfer", "GovernanceError", "CfNeuron", "CfParticipant", "Ballot", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetDissolveTimestamp", "Operation", "Configure", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "ApproveGenesisKyc", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "Result_6", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_7", "SettleCommunityFundParticipation", "UpdateNodeProvider", "StakeNeuronError", "CouldNotClaimNeuronError", "InsufficientAmountError", "minimumAmount", "UnrecognizedTypeError", "detail", "InvalidAccountIDError", "UnsupportedValueError", "FeatureNotSupportedError", "import_buffer", "accountIdentifierToBytes", "accountIdentifier", "accountIdentifierFromBytes", "principalToAccountIdentifier", "principal", "subAccount", "padding", "asciiStringToByteArray", "shaObj", "sha224", "arrayOfNumberToUint8Array", "hash", "checksum", "bigEndianCrc32", "uint8ArrayToHexString", "fromProposalId", "proposalId", "fromNeuronId", "neuronId", "fromFollowees", "followees", "fromNeuronIdOrSubaccount", "neuronIdOrSubaccount", "fromPercentage", "percentage", "fromDuration", "duration", "fromGlobalTimeOfDay", "time", "fromCountries", "countries", "fromTokens", "tokens", "fromImage", "image", "fromVotingRewardParameters", "votingRewardParameters", "fromLedgerParameters", "ledgerParameters", "fromSwapParameters", "swapParameters", "fromNeuronBasketConstructionParameters", "neuronBasketConstructionParameters", "fromGovernanceParameters", "governanceParameters", "fromSwapDistribution", "swapDistribution", "fromInitialTokenDistribution", "initialTokenDistribution", "fromDeveloperDistribution", "fromNeuronDistribution", "neuronDistribution", "Principal", "developerDistribution", "fromCreateServiceNervousSystem", "createServiceNervousSystem", "principalId", "fromAction", "action", "executeNnsFunction", "arrayBufferToUint8Array", "manageNeuron", "fromManageNeuron", "networkEconomics", "rewardNodeProvider", "fromNodeProvider", "fromRewardMode", "rewardNodeProviders", "r", "addOrRemoveNodeProvider", "fromChange", "f", "knownNeuron", "request", "swapCanisterId", "communityFundInvestmentE8s", "targetSwapCanisterId", "params", "toNullable", "fromCommand", "command", "follow", "claimOrRefresh", "fromClaimOrRefreshBy", "configure", "fromOperation", "registerVote", "disburseToNeuron", "percentageToStake", "makeProposal", "disburse", "fromAccountIdentifier", "fromAmount", "spawn", "merge", "operation", "removeHotKey", "addHotKey", "requestedSettingForAutoStakeMaturity", "change", "nodeProvider", "amount", "rewardMode", "by", "fromListNeurons", "neuronIds", "id", "fromListProposalsRequest", "includeRewardStatus", "beforeProposal", "excludeTopic", "includeStatus", "includeAllManageNeuronProposals", "fromClaimOrRefreshNeuronRequest", "toClaimOrRefreshRequest", "memo", "controller", "rawCommand", "toSplitRawRequest", "toRegisterVoteRequest", "vote", "toCommand", "toMakeProposalRawRequest", "toManageNeuronsFollowRequest", "topic", "followeeId", "toDisburseNeuronRequest", "toAccountIdentifier", "toMergeMaturityRequest", "percentageToMerge", "toStakeMaturityRequest", "toSpawnNeuronRequest", "percentageToSpawn", "newController", "nonce", "toAddHotkeyRequest", "toConfigureOperation", "toRemoveHotkeyRequest", "toIncreaseDissolveDelayRequest", "additionalDissolveDelaySeconds", "toSetDissolveDelayRequest", "dissolveDelaySeconds", "toJoinCommunityFundRequest", "toAutoStakeMaturityRequest", "autoStake", "toLeaveCommunityFundRequest", "toMergeRequest", "sourceNeuronId", "targetNeuronId", "toStartDissolvingRequest", "toStopDissolvingRequest", "fromAddHotKeyRequest", "PrincipalIdConstructor", "ManageNeuronConstructor", "NeuronIdConstructor", "importNnsProto", "hotkeyPrincipal", "hotkey", "result", "fromRemoveHotKeyRequest", "fromIncreaseDissolveDelayRequest", "pbNeuronId", "fromStartDissolvingRequest", "fromStopDissolvingRequest", "fromCommunityFundRequest", "fromDisburseRequest", "AccountIdentifierConstructor", "fromMergeMaturityRequest", "mergeMaturity", "fromSpawnRequest", "NeuronState", "Topic", "ProposalRewardStatus", "ProposalStatus", "Vote", "NnsFunction", "toNeuronInfo", "neuronInfo", "rawNeuron", "canisterId", "fullNeuron", "toNeuron", "toBallotInfo", "neuron", "toNeuronId", "fromNullable", "p", "toDissolveState", "toFollowees", "proposal_id", "dissolveState", "toNeuronIdOrSubaccount", "uint8ArrayToArrayOfNumber", "toBallot", "ballot", "votingPower", "toProposal", "title", "url", "summary", "toAction", "toNodeProvider", "toRewardMode", "toChange", "toKnownNeuron", "toGovernanceParameters", "toImage", "toLedgerParameters", "toCanisterIdString", "toSwapParameters", "toInitialTokenDistribution", "toTally", "tally", "toClaimOrRefreshBy", "toOperation", "percentage_to_stake", "toAmount", "toProposalInfo", "proposalInfo", "toArrayOfNeuronInfo", "neuron_infos", "full_neurons", "toListProposalsResponse", "proposal_info", "known_neuron_data", "convertPbBallot", "pbBallot", "pbProposalId", "pbNeuronToNeuronState", "convertPbFolloweesMapToFollowees", "pbFolloweesMap", "topicString", "pbFollowees", "convertPbPrincipalIdToPrincipalString", "pbPrincipal", "convertNeuronSubaccountToAccountIdentifier", "SubAccount", "convertPbNeuronToFullNeuron", "pbNeuron", "pbNeuronInfo", "idObj", "pbController", "convertPbNeuronToNeuronInfo", "pbNeurons", "pbNeuronMapEntry", "toPercentage", "toDuration", "toGlobalTimeOfDay", "toCountries", "toTokens", "canister", "fromDefinedNullable", "toVotingRewardParameters", "toNeuronBasketConstructionParameters", "toSwapDistribution", "toNeuronDistribution", "toDeveloperDistribution", "checkPbManageNeuronResponse", "rawResponse", "ManageNeuronResponseConstructor", "err", "getSuccessfulCommandFromResponse", "response", "data", "service", "simulateManageNeuron", "checkAccountId", "accountId", "toAccountBytes", "foundChecksum", "expectedCheckum", "GovernanceCanister", "certifiedService", "agent", "hardwareWallet", "certified", "rawRequest", "raw_response", "stake", "fromSubAccount", "ledgerCanister", "createdAt", "fee", "E8S_PER_TOKEN", "nonceBytes", "uint8ArrayToBigInt", "toSubAccount", "isNullish", "account", "nonNullish", "followRequest", "toAccountId", "assertPercentageNumber", "createdNeuronId", "sha256", "ListNeuronsConstructor", "ListNeuronsResponseConstructor", "updateCall", "options", "MAINNET_GOVERNANCE_CANISTER_ID", "createServices", "ICP", "e8s", "token", "amount", "ICPToken", "convertStringToE8s", "ICPTsConstructor", "importNnsProto", "proto", "idlFactory", "IDL", "SubAccount", "Account", "UpgradeArgs", "Tokens", "TextAccountIdentifier", "Duration", "ArchiveOptions", "InitArgs", "LedgerCanisterPayload", "BlockIndex", "GetBlocksArgs", "Memo", "AccountIdentifier", "TimeStamp", "Operation", "Transaction", "Block", "BlockRange", "QueryArchiveError", "QueryArchiveResult", "QueryArchiveFn", "QueryBlocksResponse", "AccountBalanceArgs", "AccountBalanceArgsDfx", "Archive", "Archives", "Icrc1Tokens", "Value", "Icrc1Timestamp", "TransferArg", "Icrc1BlockIndex", "Icrc1TransferError", "Icrc1TransferResult", "SendArgs", "TransferArgs", "TransferError", "TransferResult", "TransferFeeArg", "TransferFee", "subAccountNumbersToSubaccount", "subAccountNumbers", "bytes", "SubaccountConstructor", "importNnsProto", "subaccount", "toICPTs", "amount", "ICPTsConstructor", "result", "e8sToTokens", "e8s", "toTransferRawRequest", "to", "memo", "fee", "fromSubAccount", "createdAt", "TRANSACTION_FEE", "arrayOfNumberToUint8Array", "InvalidSenderError", "InsufficientFundsError", "balance", "TxTooOldError", "allowed_window_secs", "TxCreatedInFutureError", "TxDuplicateError", "duplicateOf", "BadFeeError", "expectedFee", "mapTransferError", "rawTransferError", "mapTransferProtoError", "responseBytes", "message", "m", "convertStringToE8s", "LedgerCanister", "agent", "canisterId", "service", "certifiedService", "updateFetcher", "queryFetcher", "hardwareWallet", "accountIdentifier", "certified", "request", "rawRequest", "response", "callMethod", "AccountBalanceRequestConstructor", "ICPTs", "SendRequest", "Payment", "BlockHeight", "payment", "requestMemo", "timestamp", "err", "options", "MAINNET_LEDGER_CANISTER_ID", "createServices", "updateCall", "queryCall", "idlFactory", "IDL", "SnsWasmCanisterInitPayload", "SnsWasm", "AddWasmRequest", "SnsWasmError", "Result", "AddWasmResponse", "NeuronBasketConstructionParameters", "Canister", "DappCanisters", "CfNeuron", "CfParticipant", "NeuronsFundParticipants", "TreasuryDistribution", "NeuronDistribution", "DeveloperDistribution", "AirdropDistribution", "SwapDistribution", "FractionalDeveloperVotingPower", "InitialTokenDistribution", "Countries", "SnsInitPayload", "DeployNewSnsRequest", "DappCanistersTransferResult", "SnsCanisterIds", "DeployNewSnsResponse", "GetAllowedPrincipalsResponse", "SnsVersion", "GetNextSnsVersionRequest", "GetNextSnsVersionResponse", "GetSnsSubnetIdsResponse", "GetWasmRequest", "GetWasmResponse", "SnsUpgrade", "InsertUpgradePathEntriesRequest", "InsertUpgradePathEntriesResponse", "DeployedSns", "ListDeployedSnsesResponse", "ListUpgradeStepsRequest", "PrettySnsVersion", "ListUpgradeStep", "ListUpgradeStepsResponse", "UpdateAllowedPrincipalsRequest", "UpdateAllowedPrincipalsResult", "UpdateAllowedPrincipalsResponse", "UpdateSnsSubnetListRequest", "UpdateSnsSubnetListResponse", "SnsWasmCanister", "service", "certifiedService", "certified", "instances", "options", "createServices", "MAINNET_SNS_WASM_CANISTER_ID", "voteForProposal", "recentBallots", "proposalId", "id", "ineligibleNeurons", "neurons", "proposal", "ballots", "proposalTimestampSeconds", "createdTimestampSeconds", "neuronId", "createdSinceProposal", "dissolveTooShort", "ballotNeuronId", "votableNeurons", "ineligibleNeuronId", "votedNeurons"]
}
